/*
*  copyright 2015 James Ingram
*  https://james-ingram-act-two.de/
*
*  Code licensed under MIT
*
*  This file contains the implementation of the ResidentSynthHost's GUI. 
*/

var ResSynth = ResSynth || {};

ResSynth.host = (function(document)
{
    "use strict";

    var
        synth = null,
        inputDevice = null,
        currentChannel = 0,
        allLongInputControls = [], // used by AllControllersOff control
        triggerKey,
        presetRecordings = [], // the recordings in recordings.js, converted

        // set by startRecording(), undefined by stopRecording() or discardRecording()
        settingsBeforeRecording = undefined, // array of 16 currentSettings objects
        recordedMessages = undefined, // array of 16 messages arrays 

        // set by stopRecording(), undefined by saveRecording() or discardRecording()
        currentRecording = undefined,

        recordingChannelIndices = undefined, // initialized by onPlayRecordingButtonClick(), reset by restoreStateAfterRecording()

        // used while playing back.
        cancelPlayback = false,
        recordingNoteOnError = false, // true if an attempt is made to record a NoteOn message into an existing recording.

        getElem = function(elemID)
        {
            return document.getElementById(elemID);
        },

        enableExportSettingsButton = function()
        {
            let exportSettingsButton = getElem("exportSettingsButton");

            exportSettingsButton.disabled = false;
        },

        sendMessage = function(msg, channelIndex)
        {
            synth.send(msg);
            if(recordedMessages !== undefined)
            {
                let msPositionReRecording = performance.now();

                recordedMessages[channelIndex].push({msg, msPositionReRecording});
            }
        },

        throwError = function(errorString)
        {
            alert(errorString);
            throw errorString;
        },

        setOptions = function(select, options)
        {
            var i;

            for(i = select.options.length - 1; i >= 0; --i)
            {
                select.remove(i);
            }

            for(i = 0; i < options.length; ++i)
            {
                select.add(options[i]);
            }

            select.selectedIndex = 0;
        },

        sendLongControl = function(controlIndex, value)
        {
            let msg = new Uint8Array([ResSynth.constants.COMMAND.CONTROL_CHANGE + currentChannel, controlIndex, value]);
            sendMessage(msg, currentChannel);
        },

        sendShortControl = function(controlIndex)
        {
            function resetGUILongControllersAndSendButton()
            {
                let sendButton = getElem("sendButton");
                if(sendButton.disabled === true)
                {
                    sendButton.disabled = false;
                }

                for(let i = 0; i < allLongInputControls.length; ++i)
                {
                    let longInputControl = allLongInputControls[i];
                    longInputControl.setValue(longInputControl.numberInputElem.defaultValue);
                }
            }

            if(controlIndex === ResSynth.constants.CONTROL.ALL_CONTROLLERS_OFF)
            {
                resetGUILongControllersAndSendButton();
            }

            // controlIndex === ResSynth.constants.CONTROL.ALL_CONTROLLERS_OFF || controlIndex === ResSynth.constants.CONTROL.ALL_SOUND_OFF
            let msg = new Uint8Array([ResSynth.constants.COMMAND.CONTROL_CHANGE + currentChannel, controlIndex]);
            sendMessage(msg, currentChannel);
        },

        setInputDeviceEventListener = function(inputDeviceSelect)
        {
            function handleInputMessage(e)
            {
                // Rectify performed velocities so that they are in range [6..127].
                // The velocities generated by my E-MU keyboard are in range [20..127]
                // So: (deviceVelocity - 20) is in range [0..107],
                // ((deviceVelocity - 20) * 121 / 107) is in range [0..121],
                // (121 / 107) is ca. 1.1308
                // and (6 + Math.round(((deviceVelocity - 20) * 1.1308))) is in range [6..127]
                // (The E-MU keyboard's velocity response curve is set to its curve option number 5.)
                function getRectifiedEMUVelocity(deviceVelocity)
                {
                    let rectifiedVelocity = deviceVelocity; // can be 0 (E-MU sends 0 for NoteOff)
                    if(rectifiedVelocity >= 20)
                    {
                        rectifiedVelocity = 6 + Math.round((deviceVelocity - 20) * 1.1308);
                    }
                    console.log("emuVel=" + deviceVelocity.toString() + " vel=" + rectifiedVelocity.toString());

                    return rectifiedVelocity;
                }

                function updateGUI_ControlsTable(ccIndex, ccValue)
                {
                    let longInputControls = allLongInputControls.filter(elem => elem.numberInputElem.ccIndex === ccIndex);

                    // longInputControls.length will be > 1 if there is more than one control has no ccIndex.
                    // This function simply updates all the regParam controls even though only one of them has changed.
                    for(let i = 0; i < longInputControls.length; i++)
                    {
                        let longInputControl = longInputControls[i];

                        longInputControl.setValue(ccValue);
                    }
                }

                function updateGUI_CommandsTable(cmdIndex, cmdValue)
                {
                    let longInputControl = allLongInputControls.find(elem => elem.numberInputElem.cmdIndex === cmdIndex);

                    longInputControl.setValue(cmdValue);
                }

                function doTriggerAction()
                {
                    let settingsSelect = getElem("settingsSelect");

                    settingsSelect.previousIndex = settingsSelect.selectedIndex;

                    let nextSettingsIndex = settingsSelect.previousIndex + 1;
                    nextSettingsIndex = (nextSettingsIndex === settingsSelect.options.length) ? 0 : nextSettingsIndex;

                    settingsSelect.selectedIndex = nextSettingsIndex;

                    onSettingsSelectChanged();
                }

                let data = e.data,
                    CMD = ResSynth.constants.COMMAND,
                    command = data[0] & 0xF0,
                    msg = new Uint8Array([((command + currentChannel) & 0xFF), data[1], data[2]]);

                switch(command)
                {
                    case CMD.NOTE_OFF:
                        break;
                    case CMD.NOTE_ON:
                        if(inputDevice.name.localeCompare("E-MU Xboard49") === 0)
                        {
                            msg[2] = getRectifiedEMUVelocity(msg[2]);
                        }
                        //console.log("NoteOn: key=" + data[1] + ", velocity=" + data[2]);
                        break;
                    case CMD.CONTROL_CHANGE:
                        updateGUI_ControlsTable(data[1], data[2]);
                        //console.log("control change: " + getMsgString(data));
                        break;
                    case CMD.PRESET:
                        //console.log("preset: " + getMsgString(data));
                        break;
                    case CMD.PITCHWHEEL:
                        // This host uses pitchWheel values in range 0..127, so data[1] (the fine byte) is ignored here.
                        // But note that the residentSynth _does_ use both data[1] and data[2] when responding
                        // to PITCHWHEEL messages (including those that come from the E-MU keyboard), so PITCHWHEEL
                        // messages sent from this host's GUI use a data[1] value that is calculated on the fly.
                        updateGUI_CommandsTable(command, data[2]);
                        //console.log("pitchWheel: value=" + data[2]);
                        break;
                    default:
                        // Neither the residentSynth nor the residentSynthHost process
                        // SYSEX, AFTERTOUCH or CHANNEL_PRESSURE messages
                        // so the input device (the keyboard or Assistant Performer)
                        // should not send them (at performance time)
                        // These commands will be sent to the ResidentSynth, but flagged
                        // as errors there.
                        break;
                }

                if(recordedMessages !== undefined
                    && recordingChannelIndices !== undefined && recordingChannelIndices.includes(currentChannel)
                    && command === CMD.NOTE_ON)
                {
                    cancelPlayback = true;
                    recordingNoteOnError = true;
                }
                else
                {
                    sendMessage(msg, currentChannel);
                }

                if(triggerKey !== undefined && command === CMD.NOTE_ON && data[1] === triggerKey)
                {
                    if(data[2] !== 0)
                    {
                        doTriggerAction();
                    }
                }
            }

            if(inputDevice !== null)
            {
                inputDevice.removeEventListener("midimessage", handleInputMessage, false);
                inputDevice.close()
                    .then((device) => {console.log("Closed " + device.name);})
                    .catch((device) => {console.error("Error closing " + device.name);});
            }

            inputDevice = inputDeviceSelect.options[inputDeviceSelect.selectedIndex].inputDevice;
            if(inputDevice)
            {
                inputDevice.addEventListener("midimessage", handleInputMessage, false);
                inputDevice.open()
                    .then((device) => {console.log("Opened " + device.name);})
                    .catch((device) => {console.error("Error opening " + device.name);});
            }
            else
            {
                throwError("Error: the input device is not set in the device select control.");
                inputDeviceSelect.disabled = true;
            }
        },

        // exported
        onInputDeviceSelectChanged = function()
        {
            let inputDeviceSelect = getElem("inputDeviceSelect");

            setInputDeviceEventListener(inputDeviceSelect);
        },

        // exported
        // See: https://developer.chrome.com/blog/audiocontext-setsinkid/
        onAudioDeviceSelectChanged = function()
        {
            let audioDeviceSelect = getElem("audioDeviceSelect"),
                option = audioDeviceSelect.options[audioDeviceSelect.selectedIndex],
                deviceId = (option.deviceId === "default") ? "" : option.deviceId;

            synth.setAudioOutputDevice(deviceId);
        },

        // Called by 'gitHub' and 'website' buttons
        openInNewTab = function(url)
        {
            var win = window.open(url, '_blank');
            win.focus();
        },

        // exported
        webAudioFontWebsiteButtonClick = function()
        {
            let bankSelect = getElem("bankSelect"),
                selectedOption = bankSelect[bankSelect.selectedIndex];

            openInNewTab(selectedOption.url);
        },

        // exported
        onChannelSelectChanged = function()
        {
            function setAndSendWebAudioFontDivControls(hostChannelSettings)
            {
                let bankSelect = getElem("bankSelect");

                bankSelect.selectedIndex = hostChannelSettings.bankIndex; // index in bankSelect

                // set the soundFont in the synth, and the presetSelect then call onPresetSelectChanged() (which calls onMixtureSelectChanged())
                onBankSelectChanged();
            }

            function setAndSendTuningDivControls(hostChannelSettings)
            {
                let tuningGroupSelect = getElem("tuningGroupSelect");

                tuningGroupSelect.selectedIndex = hostChannelSettings.tuningGroupIndex;

                // set the tuningSelect then call onTuningtSelectChanged()
                // (which calls onSemitonesOffsetNumberInputChanged() and onCentsOffsetNumberInputChanged())
                onTuningGroupSelectChanged();
            }

            function setAndSendLongControls(hostChannelSettings)
            {
                let pitchWheelLC = getElem("pitchWheelLongControl"),
                    modWheelLC = getElem("modWheelLongControl"),
                    volumeLC = getElem("volumeLongControl"),
                    panLC = getElem("panLongControl"),
                    reverberationLC = getElem("reverberationLongControl"),
                    pitchWheelSensitivityLC = getElem("pitchWheelSensitivityLongControl");

                pitchWheelLC.setValue(hostChannelSettings.pitchWheel);
                modWheelLC.setValue(hostChannelSettings.modWheel);
                volumeLC.setValue(hostChannelSettings.volume);
                panLC.setValue(hostChannelSettings.pan);
                reverberationLC.setValue(hostChannelSettings.reverberation);
                pitchWheelSensitivityLC.setValue(hostChannelSettings.pitchWheelSensitivity);
            }

            function setAndSendOrnamentsDivControls(hostChannelSettings)
            {
                let ornamentsSelect = getElem("ornamentsSelect");

                ornamentsSelect.selectedIndex = hostChannelSettings.keyboardOrnamentsArrayIndex;
                onOrnamentsSelectChanged();
            }

            let channelSelect = getElem("channelSelect"),
                startRecordingButton = getElem("startRecordingButton"),
                stopRecordingButton = getElem("stopRecordingButton"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings;

            currentChannel = channel; // the global currentChannel is used when constructing all midi messages

            setAndSendWebAudioFontDivControls(hostChannelSettings);
            setAndSendTuningDivControls(hostChannelSettings);

            setAndSendLongControls(hostChannelSettings);

            setAndSendOrnamentsDivControls(hostChannelSettings);

            enableExportSettingsButton();

            startRecordingButton.value = "start recording ch" + channel.toString();
            stopRecordingButton.value = "stop recording ch" + channel.toString();
        },

        // exported
        onBankSelectChanged = function()
        {
            function getBankIndexMsg(channel, bankIndex)
            {
                return new Uint8Array([ResSynth.constants.COMMAND.CONTROL_CHANGE + channel, ResSynth.constants.CONTROL.BANK, bankIndex]);
            }

            let bankSelect = getElem("bankSelect"),
                channelSelect = getElem("channelSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                presetSelect = getElem("presetSelect"),
                selectedBankOption = bankSelect[bankSelect.selectedIndex],
                presetOptionsArray = selectedBankOption.presetOptionsArray,
                bankIndexMsg = getBankIndexMsg(channel, bankSelect.selectedIndex);

            sendMessage(bankIndexMsg, channel);

            setOptions(presetSelect, presetOptionsArray);

            presetSelect.selectedIndex = 0;
            onPresetSelectChanged();

            hostChannelSettings.bankIndex = bankSelect.selectedIndex;

            enableExportSettingsButton();
        },

        // exported
        onPresetSelectChanged = function()
        {
            function getPresetMsg(channel, presetIndex)
            {
                return new Uint8Array([ResSynth.constants.COMMAND.PRESET + channel, presetIndex]);
            }

            let channelSelect = getElem("channelSelect"),
                presetSelect = getElem("presetSelect"),
                mixtureSelect = getElem("mixtureSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                presetIndex = presetSelect.selectedIndex,
                presetMsg = getPresetMsg(channel, presetIndex);

            sendMessage(presetMsg, channel);

            mixtureSelect.selectedIndex = hostChannelSettings.mixtureIndex;
            onMixtureSelectChanged();

            hostChannelSettings.presetIndex = presetSelect.selectedIndex;

            enableExportSettingsButton();
        },

        // exported
        onMixtureSelectChanged = function()
        {
            function getMixtureMsg(channel, mixtureIndex)
            {
                return new Uint8Array([CMD.CONTROL_CHANGE + channel, CTL.MIXTURE_INDEX, mixtureIndex]);
            }

            let CMD = ResSynth.constants.COMMAND,
                CTL = ResSynth.constants.CONTROL,
                channelSelect = getElem("channelSelect"),
                mixtureSelect = getElem("mixtureSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                mixtureIndex = mixtureSelect.selectedIndex,
                mixtureMessage = getMixtureMsg(channel, mixtureIndex);

            sendMessage(mixtureMessage, channel);

            hostChannelSettings.mixtureIndex = mixtureIndex;

            enableExportSettingsButton();
        },

        // exported (c.f. onBankSelectChanged() )
        onTuningGroupSelectChanged = function()
        {
            let channelSelect = getElem("channelSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                tuningGroupSelect = getElem("tuningGroupSelect"),
                tuningSelect = getElem("tuningSelect"),
                selectedTuningGroupOption = tuningGroupSelect[tuningGroupSelect.selectedIndex],
                tuningOptionsArray = selectedTuningGroupOption.tuningOptionsArray;

            setOptions(tuningSelect, tuningOptionsArray);

            tuningSelect.selectedIndex = 0
            onTuningSelectChanged();

            hostChannelSettings.tuningGroupIndex = tuningGroupSelect.selectedIndex;

            enableExportSettingsButton();
        },

        // exported
        onTuningSelectChanged = function()
        {
            let channelSelect = getElem("channelSelect"),
                tuningGroupIndex = getElem("tuningGroupSelect").selectedIndex,
                semitonesOffsetNumberInput = getElem("semitonesOffsetNumberInput"),
                centsOffsetNumberInput = getElem("centsOffsetNumberInput"),
                tuningSelect = getElem("tuningSelect"),
                tuningIndex = tuningSelect.selectedIndex,
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                CONST = ResSynth.constants,
                setTuningGroupIndexMsg = new Uint8Array([((currentChannel + CONST.COMMAND.CONTROL_CHANGE) & 0xFF), CONST.CONTROL.TUNING_GROUP_INDEX, tuningGroupIndex]),
                setTuningIndexMsg = new Uint8Array([((currentChannel + CONST.COMMAND.CONTROL_CHANGE) & 0xFF), CONST.CONTROL.TUNING_INDEX, tuningIndex]);

            sendMessage(setTuningGroupIndexMsg, channel);
            sendMessage(setTuningIndexMsg, channel);

            semitonesOffsetNumberInput.value = hostChannelSettings.semitonesOffset;
            onSemitonesOffsetNumberInputChanged();

            centsOffsetNumberInput.value = hostChannelSettings.centsOffset;
            onCentsOffsetNumberInputChanged();

            hostChannelSettings.tuningIndex = tuningIndex;

            enableExportSettingsButton();
        },

        // exported
        onSemitonesOffsetNumberInputChanged = function()
        {
            let CONST = ResSynth.constants,
                channelSelect = getElem("channelSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                semitonesOffsetNumberInput = getElem("semitonesOffsetNumberInput"),
                semitonesOffset = parseInt(semitonesOffsetNumberInput.value),
                midiValue = semitonesOffsetNumberInput.midiValue(semitonesOffset),
                semitonesOffsetMsg = new Uint8Array([((currentChannel + CONST.COMMAND.CONTROL_CHANGE) & 0xFF), CONST.CONTROL.SEMITONES_OFFSET, midiValue]);

            sendMessage(semitonesOffsetMsg, channel);

            hostChannelSettings.semitonesOffset = semitonesOffset;

            enableExportSettingsButton();
        },
        // exported
        onCentsOffsetNumberInputChanged = function()
        {
            let CONST = ResSynth.constants,
                channelSelect = getElem("channelSelect"),
                channel = channelSelect.selectedIndex,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                centsOffsetNumberInput = getElem("centsOffsetNumberInput"),
                centsOffset = parseInt(centsOffsetNumberInput.value);

            let midiValue = centsOffsetNumberInput.midiValue(centsOffset),
                centsOffsetMsg = new Uint8Array([((channel + CONST.COMMAND.CONTROL_CHANGE) & 0xFF), CONST.CONTROL.CENTS_OFFSET, midiValue]);

            sendMessage(centsOffsetMsg, channel);

            hostChannelSettings.centsOffset = centsOffset;

            enableExportSettingsButton();
        },

        onSettingsSelectChanged = function() // always updates both host and synth
        {
            function setGlobalSettingsInHost(settingsSelect)
            {
                let selectedIndex = settingsSelect.selectedIndex,
                    synthSettings = settingsSelect.synthSettingsArray[selectedIndex],
                    keyboardSplitIndex = synthSettings.keyboardSplitIndex,
                    triggerKey = synthSettings.triggerKey;

                if(selectedIndex === 0)
                {
                    // set defaults if not set in synthSettings 
                    keyboardSplitIndex = (keyboardSplitIndex === undefined) ? 0 : keyboardSplitIndex;
                    triggerKey = (triggerKey === undefined) ? 0 : triggerKey;
                }

                if(keyboardSplitIndex !== undefined)
                {
                    let keyboardSplitSelect = getElem("keyboardSplitSelect");

                    keyboardSplitSelect.selectedIndex = keyboardSplitIndex;
                    onKeyboardSplitSelectChanged();
                }

                if(triggerKey !== undefined)
                {
                    let triggerKeyInput = getElem("triggerKeyInput");

                    triggerKeyInput.value = triggerKey;
                    onTriggerKeyInputChanged(); // also sets global triggerKey and enables the exportSettingsButton;
                }
            }

            function setChannelSettingsInHost(settingsSelect)
            {
                function setDefaultSettingsInEachChannelInHost()
                {
                    let channelOptions = getElem("channelSelect").options;

                    for(let channel = 0; channel < channelOptions.length; channel++)
                    {
                        let defaultChannelSettings = new ResSynth.channelSettings.ChannelSettings(channel);

                        defaultChannelSettings.setDefaults();

                        delete defaultChannelSettings.channel;

                        channelOptions[channel].hostSettings = defaultChannelSettings;
                    }
                }

                function updateHostChannels(hostChannelOptions, synthSettings)
                {
                    let channelSettingsArray = synthSettings.channelSettings;

                    for(let i = 0; i < channelSettingsArray.length; i++)
                    {
                        let channelSettings = channelSettingsArray[i],
                            keys = Object.keys(channelSettings),
                            channel = channelSettings.channel,
                            hostChannelSettings = hostChannelOptions[channel].hostSettings;

                        // update host channel settings with each defined channel attribute.
                        for(let keyIndex = 0; keyIndex < keys.length; keyIndex++)
                        {
                            let key = keys[keyIndex],
                                newValue = channelSettings[key];

                            if(newValue === hostChannelSettings[key])
                            {
                                let errorStr = `Warning:\n` +
                                    `Redundant attribute setting in the synthSettingsDefs.\n` +
                                    `    setting: ${synthSettings.name}\n` +
                                    `    channel: ${channelSettings.channel}\n` +
                                    `    key: ${key}`;

                                throwError(errorStr);
                            }

                            hostChannelSettings[key] = newValue;
                        }
                    }
                }

                let hostChannelOptions = getElem("channelSelect").options,
                    selectedIndex = settingsSelect.selectedIndex,
                    previousIndex = settingsSelect.previousIndex;

                let startIndex = -1;
                if(selectedIndex < previousIndex) // start at index 0
                {
                    setDefaultSettingsInEachChannelInHost();
                    startIndex = 0;
                }
                else if(selectedIndex > previousIndex) // start at previousIndex + 1
                {
                    startIndex = previousIndex + 1;
                }

                for(let i = startIndex; i <= selectedIndex; i++)
                {
                    let synthSettings = settingsSelect.synthSettingsArray[i];
                    updateHostChannels(hostChannelOptions, synthSettings);
                }
            }

            let settingsSelect = getElem("settingsSelect");

            setGlobalSettingsInHost(settingsSelect);
            setChannelSettingsInHost(settingsSelect);

            settingsSelect.previousIndex = settingsSelect.selectedIndex;

            onChannelSelectChanged(); // updates the synth            
        },

        // exported
        // Exports the current settings in a format similar to that of synthSettingsDefs.js
        onExportSettingsButtonClicked = function()
        {
            function getChangedChannelSettingsArray(hostChannelOptions)
            {
                function removeTrailingDefaultSettings(defaultSettings, changedChannelSettingsArray)
                {
                    for(let ch = 15; ch >= 0; ch--)
                    {
                        if(defaultSettings.isSimilar(changedChannelSettingsArray[ch])) // isSimilar ignores the .channel attribute
                        {
                            changedChannelSettingsArray.length -= 1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }

                function removeChannelAttributes(changedChannelSettingsArray)
                {
                    for(let channel = 0; channel < changedChannelSettingsArray.length; channel++)
                    {
                        let changedChannelSettings = changedChannelSettingsArray[channel];
                        console.assert(changedChannelSettings.channel === channel);
                        delete changedChannelSettings.channel;
                    }
                }

                function addDefaultComments(defaultSettings, changedChannelSettingsArray)
                {
                    for(let channel = 0; channel < changedChannelSettingsArray.length; channel++)
                    {
                        let changedChannelSettings = changedChannelSettingsArray[channel];

                        if(defaultSettings.isSimilar(changedChannelSettings)) // isSimilar ignores the ._comment attribute
                        {
                            changedChannelSettings._comment = changedChannelSettings._comment + ` (default settings)`;
                        }
                    }
                }

                let changedChannelSettingsArray = [],
                    defaultSettings = new ResSynth.channelSettings.ChannelSettings(0);

                defaultSettings.setDefaults();;

                for(let channel = 0; channel < 16; channel++)
                {
                    let exportChannelSettings = new ResSynth.channelSettings.ChannelSettings(channel),
                        hostSettings = hostChannelOptions[channel].hostSettings;

                    exportChannelSettings._comment = `channel ${channel}`;
                    exportChannelSettings.bankIndex = hostSettings.bankIndex;
                    exportChannelSettings.presetIndex = hostSettings.presetIndex;
                    exportChannelSettings.mixtureIndex = hostSettings.mixtureIndex;
                    exportChannelSettings.tuningGroupIndex = hostSettings.tuningGroupIndex;
                    exportChannelSettings.tuningIndex = hostSettings.tuningIndex;
                    exportChannelSettings.semitonesOffset = hostSettings.semitonesOffset;
                    exportChannelSettings.centsOffset = hostSettings.centsOffset;
                    exportChannelSettings.pitchWheel = hostSettings.pitchWheel;
                    exportChannelSettings.modWheel = hostSettings.modWheel;
                    exportChannelSettings.volume = hostSettings.volume;
                    exportChannelSettings.pan = hostSettings.pan;
                    exportChannelSettings.reverberation = hostSettings.reverberation;
                    exportChannelSettings.pitchWheelSensitivity = hostSettings.pitchWheelSensitivity;
                    exportChannelSettings.velocityPitchSensitivity = hostSettings.velocityPitchSensitivity;
                    exportChannelSettings.keyboardOrnamentsArrayIndex = hostSettings.keyboardOrnamentsArrayIndex;

                    changedChannelSettingsArray.push(exportChannelSettings);
                }

                removeTrailingDefaultSettings(defaultSettings, changedChannelSettingsArray);

                removeChannelAttributes(changedChannelSettingsArray);

                addDefaultComments(defaultSettings, changedChannelSettingsArray);

                return changedChannelSettingsArray;
            }

            let hostChannelOptions = getElem("channelSelect").options,
                keyboardSplitIndex = getElem("keyboardSplitSelect").selectedIndex,
                triggerKey = getElem("triggerKeyInput").value,
                changedChannelSettingsArray = getChangedChannelSettingsArray(hostChannelOptions),
                exportSettings = {};

            exportSettings.name = "exported synth settings";
            exportSettings.keyboardSplitIndex = keyboardSplitIndex;
            exportSettings.triggerKey = triggerKey;
            exportSettings.channelSettingsArray = changedChannelSettingsArray;

            const a = document.createElement("a");
            a.href = URL.createObjectURL(new Blob([JSON.stringify(exportSettings, null, "\t")], {type: "text/plain"}));
            a.setAttribute("download", exportSettings.name + ".json");
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            getElem("exportSettingsButton").disabled = true;
        },

        // exported
        onTriggerKeyInputChanged = function()
        {
            let triggerKeyInput = getElem("triggerKeyInput");

            // set the global triggerKey variable (for convenience, used in handleInputMessage)
            triggerKey = parseInt(triggerKeyInput.value);
            enableExportSettingsButton();
        },

        // exported
        onPlayRecordingButtonClicked = async function()
        {
            function getHostChannelState()
            {
                let channelSelect = getElem("channelSelect"),
                    channelIndex = channelSelect.selectedIndex,
                    hostChannelState = {};

                hostChannelState.channelIndex = channelIndex;

                return hostChannelState;
            }

            function setInitialRecordingButtonState(b)
            {
                if(b.startRecordingButton.style.display === "block")
                {
                    setPerformanceGUIState2();
                }
                else if(b.stopRecordingButton.style.display === "block")
                {
                    setPerformanceGUIState4();
                }
                else if(b.saveRecordingButton.style.display === "block")
                {
                    setPerformanceGUIState6();
                }
            }

            function setFinalRecordingButtonState(b)
            {
                if(b.startRecordingButton.style.display === "block")
                {
                    setPerformanceGUIState1();
                }
                else if(b.stopRecordingButton.style.display === "block")
                {
                    setPerformanceGUIState3();
                }
                else
                {
                    setPerformanceGUIState5();
                }
            }

            function restoreHostAndSynthChannelState(hostChannelState)
            {
                let channelSelect = getElem("channelSelect");

                channelSelect.selectedIndex = hostChannelState.channelIndex;
                onChannelSelectChanged();
            }

            function getRecordingChannelIndices(currentRecording, presetRecording)
            {
                let recordingChannelIndices = [],
                    currentRecordingChannel = -1;

                if(currentRecording !== undefined)
                {
                    currentRecordingChannel = currentRecording.channels[0].channel;
                    recordingChannelIndices.push(currentRecordingChannel);
                }

                if(presetRecording !== undefined)
                {
                    let channelInfos = presetRecording.channels;
                    for(let i = 0; i < channelInfos.length; i++)
                    {
                        let channel = channelInfos[i].channel;
                        if(channel != currentRecordingChannel)
                        {
                            recordingChannelIndices.push(channel);
                        }
                    }
                }

                recordingChannelIndices.sort((a, b) => a - b);

                return recordingChannelIndices;
            }

            function sendMessages(recording)
            {
                let channelInfos = recording.channels;
                // Recordings contain appropriate setOrnament messages, which this function simply relays to the synth.
                // There is therefore no need to call checkSendSetOrnament(..) before noteOns in this function.
                async function sendChannelMessages(channelInfos, infoIndex)
                {
                    // This function only sends messages to the synth, not to the recording.
                    function setSynthChannelToSettings(channel, channelSettings)
                    {
                        let CMD = ResSynth.constants.COMMAND,
                            CTL = ResSynth.constants.CONTROL,
                            cmdControl = CMD.CONTROL_CHANGE + channel,
                            semitonesOffsetNumberInput = getElem("semitonesOffsetNumberInput"),
                            centsOffsetNumberInput = getElem("centsOffsetNumberInput");

                        // channelSettings.bankIndex
                        let bankIndexMsg = new Uint8Array([cmdControl, CTL.BANK, channelSettings.bankIndex]);
                        synth.send(bankIndexMsg, channel);
                        // channelSettings.presetIndex
                        let presetMsg = new Uint8Array([CMD.PRESET + channel, channelSettings.presetIndex]);
                        synth.send(presetMsg, channel);
                        // channelSettings.mixtureIndex
                        let mixtureMessage = new Uint8Array([cmdControl, CTL.MIXTURE_INDEX, channelSettings.mixtureIndex]);
                        synth.send(mixtureMessage, channel);
                        // channelSettings.tuningGroupIndex
                        let tuningGroupIndexMsg = new Uint8Array([cmdControl, CTL.TUNING_GROUP_INDEX, channelSettings.tuningGroupIndex]);
                        synth.send(tuningGroupIndexMsg, channel);
                        // channelSettings.tuningIndex
                        let tuningIndexMsg = new Uint8Array([cmdControl, CTL.TUNING_INDEX, channelSettings.tuningIndex]);
                        synth.send(tuningIndexMsg, channel);
                        // channelSettings.semitonesOffset
                        let sMidiValue = semitonesOffsetNumberInput.midiValue(channelSettings.semitonesOffset);
                        let semitonesOffsetMsg = new Uint8Array([cmdControl, CTL.SEMITONES_OFFSET, sMidiValue]);
                        synth.send(semitonesOffsetMsg, channel);
                        // channelSettings.centsOffset
                        let cMidiValue = centsOffsetNumberInput.midiValue(channelSettings.centsOffset);
                        let centsOffsetMsg = new Uint8Array([cmdControl, CTL.CENTS_OFFSET, cMidiValue]);
                        synth.send(centsOffsetMsg, channel);
                        // channelSettings.pitchWheel
                        let pitchWheelMsg = new Uint8Array([CMD.PITCHWHEEL + channel, channelSettings.pitchWheel, channelSettings.pitchWheel]);
                        synth.send(pitchWheelMsg, channel);
                        // channelSettings.modWheel
                        let modWheelMsg = new Uint8Array([cmdControl, CTL.MODWHEEL, channelSettings.modWheel]);
                        synth.send(modWheelMsg, channel);
                        // channelSettings.volume
                        let volMsg = new Uint8Array([cmdControl, CTL.VOLUME, channelSettings.volume]);
                        synth.send(volMsg, channel);
                        // channelSettings.pan
                        let panMsg = new Uint8Array([cmdControl, CTL.PAN, channelSettings.pan]);
                        synth.send(panMsg, channel);
                        // channelSettings.reverberation 
                        let reverbMsg = new Uint8Array([cmdControl, CTL.REVERBERATION, channelSettings.reverberation]);
                        synth.send(reverbMsg, channel);
                        // channelSettings.pitchWheelSensitivity
                        let pwsMsg = new Uint8Array([cmdControl, CTL.PITCH_WHEEL_SENSITIVITY, channelSettings.pitchWheelSensitivity]);
                        synth.send(pwsMsg, channel);
                        // channelSettings.velocityPitchSensitivity
                        let vpsMsg = new Uint8Array([cmdControl, CTL.VELOCITY_PITCH_SENSITIVITY, channelSettings.velocityPitchSensitivity]);
                        synth.send(vpsMsg, channel);
                        // channelSettings.keyboardOrnamentsArrayIndex
                        let koaMsg = new Uint8Array([cmdControl, CTL.SET_KEYBOARD_ORNAMENT_DEFS, channelSettings.keyboardOrnamentsArrayIndex]);
                        synth.send(koaMsg, channel);
                    }

                    function wait(delay, cancel)
                    {
                        if(!cancel)
                        {
                            return new Promise(resolve => setTimeout(resolve, delay));
                        }
                    }

                    let prevMsPos = 0,
                        channelInfo = channelInfos[infoIndex],
                        channel = channelInfo.channel,
                        channelSettings = channelInfo.channelSettings,
                        channelMessages = channelInfo.messages,
                        channelIndex = channelInfo.channel;

                    setSynthChannelToSettings(channel, channelSettings);

                    for(let mIndex = 0; mIndex < channelMessages.length; mIndex++)
                    {
                        let playbackMessage = channelMessages[mIndex],
                            pbMsg = playbackMessage.msg,
                            thisMsPos = playbackMessage.msPositionReRecording,
                            delay = thisMsPos - prevMsPos;

                        if(cancelPlayback)
                        {
                            for(let i = 0; i < channelInfos.length; i++)
                            {
                                let channel = channelInfos[i].channel,
                                    CMD = ResSynth.constants.COMMAND,
                                    CTL = ResSynth.constants.CONTROL,
                                    msg = new Uint8Array([((channel + CMD.CONTROL_CHANGE) & 0xFF), CTL.ALL_SOUND_OFF, 0]);

                                synth.send(msg); // Don't use sendMessage(...) here. These messages don't belong in a recording!
                            }
                            break;
                        }

                        await wait(delay, cancelPlayback);
                        sendMessage(pbMsg, channelIndex);
                        playbackMessage.now = performance.now();

                        prevMsPos = thisMsPos;
                    }
                }

                let promises = [];
                for(let infoIndex = 0; infoIndex < channelInfos.length; infoIndex++) 
                {
                    promises.push(sendChannelMessages(channelInfos, infoIndex)); // async (send all channels in parallel)
                }
                return promises;
            }

            let presetRecording = presetRecordings[getElem("recordingSelect").selectedIndex],
                hostChannelState = getHostChannelState(),
                b = getRecordingButtons(),
                // currentRecording only exists after clicking onStopRecordingButton.
                recordingToPlay = (currentRecording === undefined) ? presetRecording : currentRecording;

            setInitialRecordingButtonState(b);

            recordingChannelIndices = getRecordingChannelIndices(currentRecording, presetRecording); // recordingChannelIndices is global            

            let promises = sendMessages(recordingToPlay);

            // Wait for all channels to complete, before calling tidyUp().
            await Promise.allSettled(promises);

            recordingChannelIndices = undefined;

            if(cancelPlayback)
            {
                if(recordingNoteOnError)
                {
                    alert("Recording Aborted:\n\n" +
                        "Either:\n" +
                        "    The 'cancel playback' button was clicked.\n" +
                        "Or:\n" +
                        "    An attempt was made to record noteOns in an existing channel.\n" +
                        "    Only commands and controls can be overdubbed in an existing channel.\n");

                    onStopRecordingButtonClicked();
                }
                else
                {
                    alert("Playback Canceled:\n\n" +
                        "The 'cancel playback' button was clicked.");
                }
                cancelPlayback = false;
            }

            setFinalRecordingButtonState(b);

            restoreHostAndSynthChannelState(hostChannelState);
        },

        // exported
        onCancelPlaybackButtonClicked = function()
        {
            cancelPlayback = true; // global

            if(getElem("startRecordingButton").style.display === "block")
            {
                setPerformanceGUIState1();
            }
            else if(getElem("stopRecordingButton").style.display === "block")
            {
                setPerformanceGUIState3();
            }
            else
            {
                setPerformanceGUIState5();
            }
        },

        restoreStateAfterRecording = function()
        {
            function restoreTriggersDiv()
            {
                let triggerKeyTitle = getElem("triggerKeyTitle"),
                    triggerKeyInput = getElem("triggerKeyInput"),
                    keyboardSplitTitle = getElem("keyboardSplitTitle"),
                    keyboardSplitSelect = getElem("keyboardSplitSelect"),
                    settingsTitle = getElem("settingsTitle"),
                    settingsSelect = getElem("settingsSelect"),
                    exportSettingsButton = getElem("exportSettingsButton");

                keyboardSplitTitle.style.color = "black";
                keyboardSplitSelect.disabled = false;
                triggerKeyTitle.style.color = "black";
                triggerKeyInput.disabled = false;

                settingsTitle.style.color = "black";
                settingsSelect.disabled = settingsSelect.prevState;
                settingsSelect.prevState = undefined;
                exportSettingsButton.disabled = exportSettingsButton.prevState;
                exportSettingsButton.prevState = undefined;
            }

            function restoreRecordingsDiv()
            {
                getElem("recordingTitle").style.color = "black";
                getElem("recordingSelect").disabled = false;

                setPerformanceGUIState1();
            }

            function restoreHostAndSynthSettings()
            {
                let channelSelect = getElem("channelSelect");

                channelSelect.disabled = false;

                if(recordingChannelIndices !== undefined)
                {
                    for(let i = 0; i < recordingChannelIndices.length; i++)
                    {
                        channelSelect.selectedIndex = recordingChannelIndices[i].channel;
                        onChannelSelectChanged(); // reloads the host settings and sets the synth (without recording the sent messages)
                    }
                }
            }

            function restoreHostGlobalRecordingVariables()
            {
                // set by startRecording(), undefined by stopRecording() or discardRecording()
                settingsBeforeRecording = undefined; // array of 16 currentSettings objects
                recordedMessages = undefined; // array of 16 messages arrays 

                // set by stopRecording(), undefined by saveRecording(), discardRecording()
                currentRecording = undefined;

                // set by onPlayRecording()
                recordingChannelIndices = undefined;
            }

            restoreTriggersDiv();

            restoreRecordingsDiv();

            restoreHostAndSynthSettings();

            restoreHostGlobalRecordingVariables();
        },

        // exported
        onSaveRecordingButtonClicked = function()
        {
            function getStringArray(messages)
            {
                let rval = [],
                    nMessages = messages.length;

                for(let i = 0; i < nMessages; i++)
                {
                    let message = messages[i],
                        msg = message.msg,
                        msPositionReRecording = message.msPositionReRecording,
                        msg2String = (msg[2] === undefined) ? "0" : msg[2].toString(),
                        str = msg[0].toString() + "," + msg[1].toString() + "," + msg2String + "," + msPositionReRecording.toString();

                    rval.push(str);
                }
                return rval;
            }

            console.assert(currentRecording != undefined); // should be set in onStopRecordingButtonClick()

            let channelInfos = currentRecording.channels;

            for(let infoIndex = 0; infoIndex < channelInfos.length; infoIndex++)
            {
                let channelInfo = channelInfos[infoIndex];
                channelInfo.messages = getStringArray(channelInfo.messages);
            }

            const a = document.createElement("a");
            a.href = URL.createObjectURL(new Blob([JSON.stringify(currentRecording, null, "\t")], {
                type: "text/plain"
            }));
            a.setAttribute("download", currentRecording.name);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            restoreStateAfterRecording(); // calls setPerformanceGUIState1();
        },

        // exported
        onDiscardRecordingButtonClicked = function()
        {
            restoreStateAfterRecording(); // calls setPerformanceGUIState1();
        },

        getRecordingButtons = function()
        {
            let playRecordingButton = getElem("playRecordingButton"),
                cancelPlaybackButton = getElem("cancelPlaybackButton"),
                startRecordingButton = getElem("startRecordingButton"),
                stopRecordingButton = getElem("stopRecordingButton"),
                saveRecordingButton = getElem("saveRecordingButton"),
                discardRecordingButton = getElem("discardRecordingButton"),
                buttons = {};

            buttons.playRecordingButton = playRecordingButton;
            buttons.cancelPlaybackButton = cancelPlaybackButton;
            buttons.startRecordingButton = startRecordingButton;
            buttons.stopRecordingButton = stopRecordingButton;
            buttons.saveRecordingButton = saveRecordingButton;
            buttons.discardRecordingButton = discardRecordingButton;

            return buttons;
        },

        // State 1 = The initial state
        // (playSelectedRecording, startRecording)
        setPerformanceGUIState1 = function()
        {
            let b = getRecordingButtons();

            b.cancelPlaybackButton.style.display = "none";
            b.discardRecordingButton.style.display = "none";
            b.stopRecordingButton.style.display = "none";
            b.saveRecordingButton.style.display = "none";

            b.playRecordingButton.style.display = "block";
            b.playRecordingButton.value = "play selected recording";
            b.playRecordingButton.style.background = "none";            
            b.startRecordingButton.style.display = "block";
            b.startRecordingButton.disabled = false;
        },

        // State 2 = State 1 + playRecordingButton clicked
        // ("cancelPlayback, startRecording disabled")
        setPerformanceGUIState2 = function()
        {
            let b = getRecordingButtons();

            b.playRecordingButton.style.display = "none";
            b.discardRecordingButton.style.display = "none";
            b.stopRecordingButton.style.display = "none";
            b.saveRecordingButton.style.display = "none";

            b.cancelPlaybackButton.style.display = "block";
            b.startRecordingButton.style.display = "block";
            b.startRecordingButton.disabled = true;
        },
        // State 3 = State 1 + startRecordingButton clicked
        // (playSelected, stopRecording)
        setPerformanceGUIState3 = function()
        {
            let b = getRecordingButtons();

            b.cancelPlaybackButton.style.display = "none";
            b.discardRecordingButton.style.display = "none";
            b.startRecordingButton.style.display = "none";
            b.saveRecordingButton.style.display = "none";

            b.playRecordingButton.style.display = "block";
            b.playRecordingButton.value = "play selected recording";
            b.playRecordingButton.style.background = "none";
            b.stopRecordingButton.style.display = "block";
            b.stopRecordingButton.disabled = false;
        },

        // State 4 = State 3 + playRecordingButton clicked
        // (cancelPlayback, stopRecording disabled)
        setPerformanceGUIState4 = function()
        {
            let b = getRecordingButtons();

            b.playRecordingButton.style.display = "none";
            b.discardRecordingButton.style.display = "none";
            b.startRecordingButton.style.display = "none";
            b.saveRecordingButton.style.display = "none";

            b.cancelPlaybackButton.style.display = "block";
            b.stopRecordingButton.style.display = "block";
            b.stopRecordingButton.disabled = true;
        },

        // State 5 = State 3 + stopRecordingButton clicked
        // (playCurrent, discardRecording, saveRecording)
        setPerformanceGUIState5 = function()
        {
            let b = getRecordingButtons();

            b.cancelPlaybackButton.style.display = "none";
            b.startRecordingButton.style.display = "none";
            b.stopRecordingButton.style.display = "none";

            b.playRecordingButton.style.display = "block";
            b.playRecordingButton.value = "play current recording";
            b.playRecordingButton.style.background = "#DFD";
            b.discardRecordingButton.style.display = "block";
            b.discardRecordingButton.disabled = false;
            b.saveRecordingButton.style.display = "block";
            b.saveRecordingButton.disabled = false;
        },

        // State 6 = State 5 + playRecordingButton clicked
        // ("cancelPlayback, discardRecording disabled, saveRecording disabled")
        setPerformanceGUIState6 = function()
        {
            let b = getRecordingButtons();

            b.playRecordingButton.style.display = "none";
            b.startRecordingButton.style.display = "none";
            b.stopRecordingButton.style.display = "none";

            b.cancelPlaybackButton.style.display = "block";
            b.discardRecordingButton.style.display = "block";
            b.discardRecordingButton.disabled = true;
            b.saveRecordingButton.style.display = "block";
            b.saveRecordingButton.disabled = true;
        },

        // exported
        // This application can only record on a single channel.
        // It can, however play back multi-channel recordings - even while recording.
        onStartRecordingButtonClicked = function()
        {
            function getCurrentSettings(channelSelectOptions)
            {
                let currentSettings = [];

                for(var channelIndex = 0; channelIndex < 16; channelIndex++)
                {
                    let channelSettings = structuredClone(channelSelectOptions[channelIndex].hostSettings);

                    currentSettings.push(channelSettings);
                }

                return currentSettings;
            }

            function getEmptyRecordedMessagesArray()
            {
                let emptyRecordedMessages = [];

                for(var channelIndex = 0; channelIndex < 16; channelIndex++)
                {
                    emptyRecordedMessages.push([]);
                }
                return emptyRecordedMessages;
            }

            function disableTriggersDiv()
            {
                let triggerKeyTitle = getElem("triggerKeyTitle"),
                    triggerKeyInput = getElem("triggerKeyInput"),
                    keyboardSplitTitle = getElem("keyboardSplitTitle"),
                    keyboardSplitSelect = getElem("keyboardSplitSelect"),
                    settingsTitle = getElem("settingsTitle"),
                    settingsSelect = getElem("settingsSelect"),
                    exportSettingsButton = getElem("exportSettingsButton");


                keyboardSplitTitle.style.color = "darkgray";
                keyboardSplitSelect.disabled = true;
                triggerKeyTitle.style.color = "darkgray";
                triggerKeyInput.disabled = true;
                settingsTitle.style.color = "darkgray";
                settingsSelect.prevState = settingsSelect.disabled;
                settingsSelect.disabled = true;
                exportSettingsButton.prevState = exportSettingsButton.disabled;
                exportSettingsButton.disabled = true;
            }

            let channelSelect = getElem("channelSelect");

            // set globals
            settingsBeforeRecording = getCurrentSettings(channelSelect.options); // array (16 channels)
            recordedMessages = getEmptyRecordedMessagesArray(); // array (16 channels)

            // can't change channel manually while recording
            channelSelect.disabled = true;
            disableTriggersDiv();

            setPerformanceGUIState3();
        },

        // exported
        onStopRecordingButtonClicked = function()
        {
            function recordedMessagesExist(recordedMessages)
            {
                let theyExist = false;

                if(recordedMessages !== undefined)
                {
                    for(let channelIndex = 0; channelIndex < 16; channelIndex++)
                    {
                        if(recordedMessages[channelIndex].length > 0)
                        {
                            theyExist = true;
                            break;
                        }
                    }
                }

                return theyExist;
            }

            // Moves the time origin to 0, and rounds each value to the nearest integer.
            // Truncates each channel, so that the final message is a NoteOff (i.e removes trailing control messages)
            function normalizeMsPositionReRecordingValues(recordedMessages)
            {
                let NOTE_ON = ResSynth.constants.COMMAND.NOTE_ON,
                    NOTE_OFF = ResSynth.constants.COMMAND.NOTE_OFF,
                    timeOrigin = Number.MAX_VALUE;

                console.assert(recordedMessages.length === 16);

                for(let channelIndex = 0; channelIndex < 16; channelIndex++)
                {
                    let channelMessages = recordedMessages[channelIndex];
                    if(channelMessages.length > 0)
                    {
                        let firstMessage = channelMessages[0];

                        timeOrigin = (firstMessage.msPositionReRecording < timeOrigin) ? firstMessage.msPositionReRecording : timeOrigin;
                    }
                }

                for(let channelIndex = 0; channelIndex < 16; channelIndex++)
                {
                    let channelMessages = recordedMessages[channelIndex];

                    if(channelMessages.length > 0)
                    {
                        for(var msgIndex = channelMessages.length - 1; msgIndex >= 0; msgIndex--)
                        {
                            let command = channelMessages[msgIndex].msg[0] & 0xF0;

                            if(command === NOTE_ON || command === NOTE_OFF)
                            {
                                break;
                            }
                            else
                            {
                                channelMessages.pop();
                            }
                        }

                        for(var messageIndex = 0; messageIndex < channelMessages.length; messageIndex++)
                        {
                            let message = channelMessages[messageIndex];

                            message.msPositionReRecording = Math.round(message.msPositionReRecording - timeOrigin);
                        }
                    }
                }

                return recordedMessages;
            }

            // Returns the currentRecording in the format used in presetRecordings, so that it can easily be
            // played by onPlayRecordingButtonClicked() and onSaveRecordingButtonClicked().
            // Resets the global settingsBeforeRecording and recordedMessages to undefined.
            function getCurrentRecording(settingsBeforeRecording, recordedMessages)
            {
                // returns a non-sparse array containing only the channels that nave messages
                function getChannelInfos(settingsBeforeRecording, recordedMessages)
                {
                    let channelInfos = [];

                    for(var channelIndex = 0; channelIndex < 16; channelIndex++)
                    {
                        if(recordedMessages[channelIndex].length > 0)
                        {
                            let channelInfo = {};

                            channelInfo.channel = channelIndex;
                            channelInfo.channelSettings = settingsBeforeRecording[channelIndex];
                            channelInfo.messages = recordedMessages[channelIndex];

                            channelInfos.push(channelInfo);
                        }
                    }

                    return channelInfos;
                }

                function getName(channelInfos)
                {
                    let fileName = undefined;
                    if(channelInfos.length === 1)
                    {
                        fileName = "ch" + channelInfos[0].channel.toString() + "_recording.json"
                    }
                    else
                    {
                        let channelsStr = "";
                        for(let i = 0; i < channelInfos.length; i++)
                        {
                            channelsStr = channelsStr + channelInfos[i].channel.toString() + ",";
                        }
                        channelsStr = channelsStr.slice(0, channelsStr.length - 1);
                        fileName = "chs" + channelsStr + "_recording.json";
                    }
                    return fileName;
                }

                console.assert(settingsBeforeRecording.length === 16 && recordedMessages.length === 16)

                let currentRecording = {},
                    channelInfos = getChannelInfos(settingsBeforeRecording, recordedMessages),
                    name = getName(channelInfos);

                currentRecording.name = name;
                currentRecording.channels = channelInfos;

                return currentRecording;
            }

            if(cancelPlayback === false && recordedMessagesExist(recordedMessages))
            {
                normalizeMsPositionReRecordingValues(recordedMessages);

                currentRecording = getCurrentRecording(settingsBeforeRecording, recordedMessages);

                settingsBeforeRecording = undefined;
                recordedMessages = undefined;

                setPerformanceGUIState5();
            }
            else
            {
                restoreStateAfterRecording(); // calls setPerformanceGUIState1()
            }
        },

        onKeyboardSplitSelectChanged = function()
        {
            const constants = ResSynth.constants;
            let keyboardSplitIndex = getElem("keyboardSplitSelect").selectedIndex,
                setKeyboardSplitIndexMsg = new Uint8Array([constants.COMMAND.CONTROL_CHANGE, constants.CONTROL.SET_KEYBOARD_SPLIT_ARRAY, keyboardSplitIndex]);

            synth.send(setKeyboardSplitIndexMsg); // this message updates all channels (it ignores the channel bits in the message)

            enableExportSettingsButton(); 
        },

        onOrnamentsSelectChanged = function()
        {
            let channelSelect = getElem("channelSelect"),
                channel = channelSelect.selectedIndex,
                cmdControl = ResSynth.constants.COMMAND.CONTROL_CHANGE + channel,
                CTL = ResSynth.constants.CONTROL,
                hostChannelSettings = channelSelect.options[channel].hostSettings,
                ornamentsSelect = getElem("ornamentsSelect"),
                keyboardOrnamentsArrayIndex = ornamentsSelect.selectedIndex;

            hostChannelSettings.keyboardOrnamentsArrayIndex = keyboardOrnamentsArrayIndex;
            enableExportSettingsButton();

            let keyboardOrnamentsArrayIndexMsg = new Uint8Array([cmdControl, CTL.SET_KEYBOARD_ORNAMENT_DEFS, keyboardOrnamentsArrayIndex]);
            sendMessage(keyboardOrnamentsArrayIndexMsg, channel);
        },

        // exported
        onContinueAtStartClicked = function()
        {
            function setPage2Display(synth)
            {
                function setChannelsDiv()
                {
                    function setKeyboardSplitSelect()
                    {
                        let keyboardSplitSelect = getElem("keyboardSplitSelect");

                        // this option is always added by default to index 0
                        let option = new Option();
                        option.innerHTML = "no split (messages will be sent on the current channel)";
                        keyboardSplitSelect.options.add(option);

                        if(ResSynth.keyboardSplitDefs !== undefined)
                        {
                            let keyboardSplitDefs = ResSynth.keyboardSplitDefs;

                            for(let i = 0; i < keyboardSplitDefs.length; i++)
                            {
                                let keyboardSplitDef = keyboardSplitDefs[i],
                                    option = new Option();

                                option.innerHTML = keyboardSplitDef;
                                keyboardSplitSelect.options.add(option);
                            }
                        }

                        keyboardSplitSelect.selectedIndex = 0;
                    }

                    setKeyboardSplitSelect();
                }

                function setBankSelect(bankSelect)
                {
                    function getBankOptions(banks)
                    {
                        let options = [];

                        for(let bankIndex = 0; bankIndex < banks.length; bankIndex++)
                        {
                            let option = new Option("bankOption"),
                                bank = banks[bankIndex],
                                presets = bank.presets,
                                presetOptionsArray = [];

                                for(let presetIndex = 0; presetIndex < presets.length; presetIndex++)
                                {
                                    let preset = presets[presetIndex],
                                        presetOption = new Option("presetOption");

                                    presetOption.innerHTML = preset.name;
                                    presetOption.preset = preset;
                                    presetOption.preset.mixtureIndex = 0;

                                    presetOptionsArray.push(presetOption);
                                }


                            option.innerHTML = bank.name;
                            option.soundFont = bank;
                            option.presetOptionsArray = presetOptionsArray; // used to set the presetSelect
                            option.url = "https://github.com/surikov/webaudiofont";

                            options.push(option);
                        }

                        return options;
                    }

                    let bankOptions = getBankOptions(synth.webAudioFont);

                    setOptions(bankSelect, bankOptions);

                    bankSelect.selectedIndex = 0;
                }

                function setPresetSelect(presetSelect, bankSelect)
                {
                    setOptions(presetSelect, bankSelect[bankSelect.selectedIndex].presetOptionsArray);

                    presetSelect.selectedIndex = 0;
                }

                function setMixtureSelect(mixtureSelect)
                {
                    function getMixtureOptions()
                    {
                        let mixtures = synth.mixtures,
                            options = [];

                        console.assert(mixtures.length < 127);

                        if(mixtures.length === 0)
                        {
                            let option = new Option("mixtureOption");
                            option.innerHTML = "no mixtures defined";
                            options.push(option);
                        }
                        else
                        {
                            for(let mixtureIndex = 0; mixtureIndex < mixtures.length; mixtureIndex++)
                            {
                                let option = new Option("mixtureOption");

                                option.innerHTML = mixtures[mixtureIndex].name;

                                options.push(option);
                            }
                        }

                        return options;
                    }

                    let mixtureOptions = getMixtureOptions();

                    setOptions(mixtureSelect, mixtureOptions);

                    mixtureSelect.selectedIndex = 0;
                }

                function setTuningGroupSelect(tuningGroupSelect)
                {
                    function getTuningGroupOptions(tuningGroups)
                    {
                        let options = [];

                        for(let i = 0; i < tuningGroups.length; i++)
                        {
                            let tuningGroupOption = new Option("tuningGroupOption"),
                                tuningGroup = tuningGroups[i],
                                tuningOptionsArray = [];

                            for(let j = 0; j < tuningGroup.length; j++)
                            {
                                let tuningOption = new Option("tuningOption");

                                tuningOption.innerHTML = tuningGroup[j].name;
                                tuningOptionsArray.push(tuningOption);
                            }

                            if(tuningGroup.name === undefined) // missing tuningDefs.js file
                            {
                                let tuningGroupSelect = getElem("tuningGroupSelect");

                                tuningGroupOption.innerHTML = "no tuning groups defined";                                
                                tuningGroupSelect.disabled = true;                                
                            }
                            else
                            {
                                tuningGroupOption.innerHTML = tuningGroup.name;
                            }
                            
                            tuningGroupOption.tuningGroup = tuningGroup;
                            tuningGroupOption.tuningOptionsArray = tuningOptionsArray; // used to set the tuningSelect

                            options.push(tuningGroupOption);
                        }

                        return options;
                    }

                    let tuningGroupOptions = getTuningGroupOptions(synth.tuningGroups);
                    setOptions(tuningGroupSelect, tuningGroupOptions);
                    tuningGroupSelect.selectedIndex = 0;
                }

                function setTuningSelect()
                {
                    function appendTuningSelect(tuningSelectCell, tuningOptionsArray)
                    {
                        var tuningSelect;

                        tuningSelect = document.createElement("select");
                        tuningSelect.id = "tuningSelect";
                        tuningSelect.className = "tuningSelect";
                        setOptions(tuningSelect, tuningOptionsArray);
                        tuningSelect.onchange = onTuningSelectChanged;
                        tuningSelectCell.appendChild(tuningSelect);
                    }

                    let tuningGroupSelect = getElem("tuningGroupSelect"),
                        tuningSelectCell = getElem("tuningSelectCell"),
                        tuningOptionsArray = tuningGroupSelect[tuningGroupSelect.selectedIndex].tuningOptionsArray;

                    appendTuningSelect(tuningSelectCell, tuningOptionsArray);
                }

                function setSemitonesAndCentsControls()
                {
                    function getMidiValue(controlValue)
                    {
                        return controlValue + 64;
                    }

                    let semitonesOffsetNumberInput = getElem("semitonesOffsetNumberInput"),
                        centsOffsetNumberInput = getElem("centsOffsetNumberInput");

                    semitonesOffsetNumberInput.midiValue = getMidiValue;
                    centsOffsetNumberInput.midiValue = getMidiValue;
                }

                function setHostSettingsFromLongControl(longControl, value)
                {
                    let channel = getElem("channelSelect").selectedIndex,
                        hostChannelSettings = channelSelect.options[channel].hostSettings;

                    if(hostChannelSettings !== undefined)
                    {
                        let longControlID = longControl.id;

                        switch(longControlID)
                        {
                            case "pitchWheelLongControl":
                                hostChannelSettings.pitchWheel = value;
                                break;
                            case "modWheelLongControl":
                                hostChannelSettings.modWheel = value;
                                break;
                            case "volumeLongControl":
                                hostChannelSettings.volume = value;
                                break;
                            case "panLongControl":
                                hostChannelSettings.pan = value;
                                break;
                            case "reverberationLongControl":
                                hostChannelSettings.reverberation = value;
                                break;
                            case "pitchWheelSensitivityLongControl":
                                hostChannelSettings.pitchWheelSensitivity = value;
                                break;
                            case "velocityPitchSensitivityLongControl":
                                hostChannelSettings.velocityPitchSensitivity = value;
                                break;
                            default:
                                console.assert(false, "Unknown long control");
                                break;
                        }

                        enableExportSettingsButton();
                    }
                }

                function setCommandsAndControlsDivs()
                {
                    // called by both commands and CCs
                    function getBasicLongInputControl(tr, name, defaultValue, infoString)
                    {
                        function getLongControlValue()
                        {
                            return this.rangeInputElem.valueAsNumber;
                        }

                        function getInputElemValue()
                        {
                            return this.valueAsNumber;
                        }

                        // sets synth and channel GUI state
                        function setLongControlValue(value)
                        {
                            this.rangeInputElem.value = value;
                            this.numberInputElem.value = value;

                            setHostSettingsFromLongControl(this, value);

                            this.numberInputElem.onchange();
                        }

                        let nameStrTD = document.createElement("td");
                        tr.appendChild(nameStrTD);
                        nameStrTD.className = "left";
                        nameStrTD.innerHTML = name;

                        // this td contains the slider, number and button inputs
                        let longControlTD = document.createElement("td");
                        longControlTD.id = name + "LongControl";
                        tr.appendChild(longControlTD);

                        let rangeInputElem = document.createElement("input"),
                            numberInputElem = document.createElement("input"),
                            buttonInputElem = document.createElement("input");

                        rangeInputElem.getValue = getInputElemValue;
                        //rangeInputElem.onchange = "ResSynth.host.onLongControlComponentChanged()"; -- is set later
                        numberInputElem.getValue = getInputElemValue;
                        //numberInputElem.onchange = "ResSynth.host.onLongControlComponentChanged()"; -- is set later

                        longControlTD.appendChild(rangeInputElem);
                        longControlTD.appendChild(numberInputElem);
                        longControlTD.appendChild(buttonInputElem);

                        longControlTD.rangeInputElem = rangeInputElem;
                        longControlTD.numberInputElem = numberInputElem;
                        longControlTD.buttonInputElem = buttonInputElem;

                        longControlTD.getValue = getLongControlValue;
                        longControlTD.setValue = setLongControlValue;

                        // slider input                        
                        rangeInputElem.type = "range";
                        rangeInputElem.className = "midiSlider";
                        //rangeInputElem.id = name + "RangeInput";
                        rangeInputElem.twinInputElem = numberInputElem;
                        rangeInputElem.value = defaultValue;
                        rangeInputElem.defaultValue = defaultValue;
                        rangeInputElem.min = 0;
                        rangeInputElem.max = 127;

                        // number input                        
                        numberInputElem.type = "number";
                        numberInputElem.className = "number";
                        // numberInputElem.id = name + "NumberInput";
                        numberInputElem.twinInputElem = rangeInputElem;
                        numberInputElem.value = defaultValue;
                        numberInputElem.defaultValue = defaultValue;
                        numberInputElem.min = 0;
                        numberInputElem.max = 127;

                        // button input
                        buttonInputElem.type = "button";
                        buttonInputElem.className = "sendAgainButton";
                        buttonInputElem.value = "send again";
                        buttonInputElem.numberInputElem = numberInputElem;

                        let infoTD = document.createElement("td");
                        tr.appendChild(infoTD);
                        infoTD.innerHTML = infoString;

                        return longControlTD;
                    }

                    function setCommandsAndControlsTable()
                    {
                        function getCommandRows()
                        {
                            function getCommandInfos()
                            {
                                function getStandardCommandInfo(constants, cmdIndex)
                                {
                                    let info = {};

                                    info.name = constants.commandName(cmdIndex);
                                    info.defaultValue = constants.commandDefaultValue(cmdIndex);
                                    info.cmdIndex = cmdIndex;
                                    info.cmdString = "CMD " + cmdIndex.toString();

                                    return info;
                                }

                                let constants = ResSynth.constants,
                                    cmd = constants.COMMAND,
                                    pitchWheel = getStandardCommandInfo(constants, cmd.PITCHWHEEL),
                                    commandInfos = [];

                                commandInfos.push(pitchWheel);

                                return commandInfos;
                            }

                            function setCommandRow(tr, name, defaultValue, cmdIndex, cmdString)
                            {
                                function baseSendCommand(cmdIndex, value)
                                {
                                    if(cmdIndex === ResSynth.constants.COMMAND.PITCHWHEEL)
                                    {
                                        // Note that:
                                        // 1. This function is called by the GUI controls, not by the EMU keyboard.
                                        // 2. The EMU keyboard generates different data1 values for the corresponding data2 values.
                                        // 3. The data1 values calculated here are such that
                                        //     a) if data2 is 64, data1 is 0.(MIDI Standard, same as EMU keyboard)
                                        //     b) data2 values are (differently) equidistant above and below data2=64.
                                        let data1 = 0,
                                            data2 = value; // default (for value === 64)

                                        if(data2 > 64)
                                        {
                                            data1 = data2;
                                        }
                                        else if(data2 < 64)
                                        {
                                            data1 = data2 * 2; // data1 is in range 0..126 for data2 0..63
                                        }

                                        //console.log("d1=" + data1 + " d2=" + data2);
                                        let msg = new Uint8Array([cmdIndex + currentChannel, data1, data2]);
                                        sendMessage(msg, currentChannel);
                                    }
                                    else
                                    {
                                        // can only be PITCHWHEEL
                                        console.assert(false, "Error");
                                    }
                                }
                                function onCommandInputChanged(event)
                                {
                                    var target = (event === undefined) ? this : event.currentTarget,
                                        value = target.valueAsNumber,
                                        cmdIndex = target.cmdIndex;

                                    target.twinInputElem.value = value;

                                    setHostSettingsFromLongControl(target.parentElement, value);

                                    baseSendCommand(cmdIndex, value);
                                }

                                function onSendCommandAgainButtonClick(event)
                                {
                                    var target = (event === undefined) ? this : event.currentTarget,
                                        numberInputElem = target.children[2],
                                        value = numberInputElem.valueAsNumber,
                                        cmdIndex = numberInputElem.cmdIndex;

                                    baseSendCommand(cmdIndex, value);
                                }

                                let longInputControlTD = getBasicLongInputControl(tr, name, defaultValue, cmdString);

                                longInputControlTD.cmdIndex = cmdIndex;
                                longInputControlTD.rangeInputElem.cmdIndex = cmdIndex;
                                longInputControlTD.numberInputElem.cmdIndex = cmdIndex;
                                longInputControlTD.rangeInputElem.onchange = onCommandInputChanged;
                                longInputControlTD.numberInputElem.onchange = onCommandInputChanged;
                                longInputControlTD.buttonInputElem.onchange = onSendCommandAgainButtonClick;

                                allLongInputControls.push(longInputControlTD);
                            }

                            let rval = [],
                                commandInfos = getCommandInfos();

                            for(let i = 0; i < commandInfos.length; ++i)
                            {
                                let commandInfo = commandInfos[i],
                                    name = commandInfo.name,
                                    defaultValue = commandInfo.defaultValue,
                                    cmdIndex = commandInfo.cmdIndex,
                                    cmdString = commandInfo.cmdString;

                                let tr = document.createElement("tr");
                                rval.push(tr);
                                setCommandRow(tr, name, defaultValue, cmdIndex, cmdString);
                            }

                            return rval;
                        }
                        // returns an array of tr elements
                        function getControlRows()
                        {
                            // 3-byte controls
                            function setLongControlRow(tr, name, defaultValue, ccIndex, regParam, ccString)
                            {
                                function onControlInputChanged(event)
                                {
                                    var target = (event === undefined) ? this : event.currentTarget,
                                        value = target.valueAsNumber,
                                        ccIndex = target.ccIndex;

                                    target.twinInputElem.value = value;

                                    setHostSettingsFromLongControl(target.parentElement, value);

                                    sendLongControl(ccIndex, value);
                                }

                                function onSendControlAgainButtonClick(event)
                                {
                                    var numberInputElem = event.currentTarget.numberInputElem,
                                        ccIndex = numberInputElem.ccIndex,
                                        value = numberInputElem.valueAsNumber;

                                    sendLongControl(ccIndex, value);
                                }

                                let longInputControlTD = getBasicLongInputControl(tr, name, defaultValue, ccString);

                                console.assert(ccIndex !== undefined);

                                longInputControlTD.ccIndex = ccIndex;
                                longInputControlTD.rangeInputElem.ccIndex = ccIndex;
                                longInputControlTD.numberInputElem.ccIndex = ccIndex;

                                longInputControlTD.rangeInputElem.onchange = onControlInputChanged;
                                longInputControlTD.numberInputElem.onchange = onControlInputChanged;
                                longInputControlTD.buttonInputElem.onclick = onSendControlAgainButtonClick;

                                allLongInputControls.push(longInputControlTD);
                            }

                            // 2-byte uControls
                            function setShortControlRow(tr, name, ccIndex, ccString)
                            {
                                var
                                    button,
                                    td = document.createElement("td");

                                function onSendShortControlButtonClick(event)
                                {
                                    sendShortControl(event.currentTarget.ccIndex);
                                }

                                tr.appendChild(td);
                                td.className = "left";
                                td.innerHTML = name;

                                td = document.createElement("td");
                                tr.appendChild(td);
                                button = document.createElement("input");
                                button.type = "button";
                                button.className = "sendButton";
                                button.value = "send";
                                button.ccIndex = ccIndex;
                                button.onclick = onSendShortControlButtonClick;
                                td.appendChild(button);

                                let node = document.createTextNode(ccString);
                                td.appendChild(node);
                            }

                            function getControlInfos()
                            {
                                function getStandardControlInfo(constants, ccIndex)
                                {
                                    let info = {};

                                    info.name = constants.controlName(ccIndex);
                                    info.defaultValue = constants.controlDefaultValue(ccIndex);
                                    info.ccIndex = ccIndex;
                                    info.ccString = "CC " + ccIndex.toString();

                                    return info;
                                }

                                let constants = ResSynth.constants,
                                    ctl = constants.CONTROL,
                                    modWheelData = getStandardControlInfo(constants, ctl.MODWHEEL),
                                    volumeData = getStandardControlInfo(constants, ctl.VOLUME),
                                    panData = getStandardControlInfo(constants, ctl.PAN),
                                    reverberationData = getStandardControlInfo(constants, ctl.REVERBERATION),
                                    pitchWheelSensitivityData = getStandardControlInfo(constants, ctl.PITCH_WHEEL_SENSITIVITY),
                                    velocityPitchSensitivityData = getStandardControlInfo(constants, ctl.VELOCITY_PITCH_SENSITIVITY),
                                    allControllersOff = getStandardControlInfo(constants, ctl.ALL_CONTROLLERS_OFF),
                                    allSoundOff = getStandardControlInfo(constants, ctl.ALL_SOUND_OFF),
                                    controlInfos = [];

                                controlInfos.push(modWheelData);
                                controlInfos.push(volumeData);
                                controlInfos.push(panData);
                                controlInfos.push(reverberationData);
                                controlInfos.push(pitchWheelSensitivityData);
                                controlInfos.push(velocityPitchSensitivityData);
                                controlInfos.push(allSoundOff);
                                controlInfos.push(allControllersOff);

                                return controlInfos;
                            }

                            let rval = [],
                                controlInfos = getControlInfos();

                            for(let i = 0; i < controlInfos.length; ++i)
                            {
                                let c = ResSynth.constants,
                                    control = c.CONTROL,
                                    controlInfo = controlInfos[i],
                                    name = controlInfo.name,
                                    defaultValue = controlInfo.defaultValue,
                                    ccIndex = controlInfo.ccIndex,
                                    regParam = controlInfo.regParam, // can be undefined
                                    ccString = controlInfo.ccString,
                                    tr = document.createElement("tr");

                                rval.push(tr);

                                if(ccIndex === control.ALL_CONTROLLERS_OFF)
                                {
                                    name = name + " (set defaults)";
                                    setShortControlRow(tr, name, ccIndex, ccString);
                                }
                                else if(ccIndex === control.ALL_SOUND_OFF)
                                {
                                    setShortControlRow(tr, name, ccIndex, ccString);
                                }
                                else
                                {
                                    setLongControlRow(tr, name, defaultValue, ccIndex, regParam, ccString);
                                }
                            }

                            return rval;
                        }

                        let commandsAndControlsTable = getElem("commandsAndControlsTable"),
                            commandRows = getCommandRows(),
                            controlRows = getControlRows();

                        for(let i = 0; i < commandRows.length; ++i)
                        {
                            let tr = commandRows[i];
                            commandsAndControlsTable.appendChild(tr);
                        }

                        for(let i = 0; i < controlRows.length; ++i)
                        {
                            let tr = controlRows[i];
                            commandsAndControlsTable.appendChild(tr);
                        }
                    }

                    allLongInputControls.length = 0;

                    setCommandsAndControlsTable();

                    sendShortControl(ResSynth.constants.CONTROL.ALL_CONTROLLERS_OFF);
                }

                function setOrnamentsDiv()
                {
                    function setKeyOrnamentsSelect()
                    {
                        let ornamentsSelect = getElem("ornamentsSelect"),
                            ornamentPerKeysStrings = ResSynth.ornamentPerKeysStrings;

                        let option = new Option();

                        option.innerHTML = "none";
                        ornamentsSelect.options.add(option);
 
                        if(ornamentPerKeysStrings !== undefined)
                        {
                            for(let i = 0; i < ornamentPerKeysStrings.length; i++)
                            {
                                let option = new Option();

                                option.innerHTML = ornamentPerKeysStrings[i];
                                ornamentsSelect.options.add(option);
                            }
                        }

                        ornamentsSelect.selectedIndex = 0;
                    }

                    setKeyOrnamentsSelect();
                }
                function setSettingsSelect()
                {
                    // Converts the information in synthSettingsDefs.js into the (private) synthSettingsArray.
                    function getSynthSettingsArray(synthSettingsDefs)
                    {
                        function checkArray(attributeName, array, length)
                        {
                            if(!Array.isArray(array) || (array.length !== length))
                            {
                                let errorString = `Error in synthSettingsDefs.js:\n` +
                                    `synthSettingsDefs.${attributeName} must be defined, and must have the same length as\n` +
                                    `the "names" attribute (${length}).`;
                                throwError(errorString);
                            }
                        }

                        function checkTopLevelAttributes(names, keyboardSplitIndexes, triggerKeys)
                        {
                            function checkNames(names, arrayLength)
                            {
                                checkArray("names", names, arrayLength);

                                for(let i = 0; i < names.length; i++)
                                {
                                    let name = names[i];
                                    if((typeof name === 'string' || name instanceof String) === false)
                                    {
                                        throwError("All synthSettingsDefs.names must be strings.")
                                    }
                                }
                            }

                            function checkKeyboardSplitIndexValues(keyboardSplitIndexes, arrayLength)
                            {
                                let keyboardSplitDefs = ResSynth.keyboardSplitDefs;

                                checkArray("keyboardSplitIndexes", keyboardSplitIndexes, arrayLength);

                                for(let i = 0; i < keyboardSplitIndexes.length; i++)
                                {
                                    let keyboardSplitIndex = keyboardSplitIndexes[i];

                                    if(!Number.isInteger(keyboardSplitIndex) || (keyboardSplitIndex < 0) || (keyboardSplitIndex >= keyboardSplitDefs.length))
                                    {
                                        throwError(`All synthSettingsDefs.keyboardSplitIndexes must be integers in range 0..${keyboardSplitDefs.length} (keyboardSplitDefs length)`);
                                    }
                                }
                            }

                            function checkTriggerKeyValues(triggerKeys, arrayLength)
                            {
                                checkArray("triggerKeys", triggerKeys, arrayLength);

                                for(let i = 0; i < triggerKeys.length; i++)
                                {
                                    let triggerKey = triggerKeys[i];
                                    if((triggerKey < 0 || triggerKey > 127))
                                    {
                                        throwError("All synthSettingsDefs.triggerKeys must be in range 0..127.");
                                    }
                                }
                            }

                            let arrayLength = names.length;

                            checkNames(names, arrayLength);
                            checkKeyboardSplitIndexValues(keyboardSplitIndexes, arrayLength);
                            checkTriggerKeyValues(triggerKeys, arrayLength);
                        }

                        function checkChannelSettingsArray(channelSettingsArray, arrayLength)
                        {
                            function checkChannelAttributeArray(channel, attributeName, array, length)
                            {
                                if(!Array.isArray(array) || (array.length !== length))
                                {
                                    let errorString = `Error in synthSettingsDefs.js\n` +
                                        `Channel ${channel} ${attributeName} must be defined, and must have the same length as\n` +
                                        `the "names" attribute (${length}).`;

                                    throwError(errorString);
                                }
                            }

                            for(let channel = 0; channel < channelSettingsArray.length; channel++)
                            {
                                let channelSettings = channelSettingsArray[channel];

                                checkChannelAttributeArray(channel, "bankIndex", channelSettings.bankIndex, arrayLength);
                                checkChannelAttributeArray(channel, "presetIndex", channelSettings.presetIndex, arrayLength);
                                checkChannelAttributeArray(channel, "mixtureIndex", channelSettings.mixtureIndex, arrayLength);
                                checkChannelAttributeArray(channel, "tuningGroupIndex", channelSettings.tuningGroupIndex, arrayLength);
                                checkChannelAttributeArray(channel, "tuningIndex", channelSettings.tuningIndex, arrayLength);
                                checkChannelAttributeArray(channel, "semitonesOffset", channelSettings.semitonesOffset, arrayLength);
                                checkChannelAttributeArray(channel, "centsOffset", channelSettings.centsOffset, arrayLength);
                                checkChannelAttributeArray(channel, "pitchWheel", channelSettings.pitchWheel, arrayLength);
                                checkChannelAttributeArray(channel, "modWheel", channelSettings.modWheel, arrayLength);
                                checkChannelAttributeArray(channel, "volume", channelSettings.volume, arrayLength);
                                checkChannelAttributeArray(channel, "pan", channelSettings.pan, arrayLength);
                                checkChannelAttributeArray(channel, "reverberation", channelSettings.reverberation, arrayLength);
                                checkChannelAttributeArray(channel, "pitchWheelSensitivity", channelSettings.pitchWheelSensitivity, arrayLength);
                                checkChannelAttributeArray(channel, "velocityPitchSensitivity", channelSettings.velocityPitchSensitivity, arrayLength);
                                checkChannelAttributeArray(channel, "keyboardOrnamentsArrayIndex", channelSettings.keyboardOrnamentsArrayIndex, arrayLength);
                            }
                        }

                        function checkChannelSettingsValues(channelSettingsArray)
                        {
                            function getChannelSettingsPerSectionArray(channelSettingsArray)
                            {
                                let channelSettingsPerSectionArray = [];

                                for(let channel = 0; channel < channelSettingsArray.length; channel++)
                                {
                                    let channelAttributesObject = channelSettingsArray[channel],
                                        nSections = channelAttributesObject.bankIndex.length,
                                        channelSections = [];

                                    for(let section = 0; section < nSections; section++)
                                    {
                                        let channelSectionSettings = {};

                                        channelSectionSettings.bankIndex = channelAttributesObject.bankIndex[section];
                                        channelSectionSettings.presetIndex = channelAttributesObject.presetIndex[section];
                                        channelSectionSettings.mixtureIndex = channelAttributesObject.mixtureIndex[section];
                                        channelSectionSettings.tuningGroupIndex = channelAttributesObject.tuningGroupIndex[section];
                                        channelSectionSettings.tuningIndex = channelAttributesObject.tuningIndex[section];
                                        channelSectionSettings.semitonesOffset = channelAttributesObject.semitonesOffset[section];
                                        channelSectionSettings.centsOffset = channelAttributesObject.centsOffset[section];
                                        channelSectionSettings.pitchWheel = channelAttributesObject.pitchWheel[section];
                                        channelSectionSettings.modWheel = channelAttributesObject.modWheel[section];
                                        channelSectionSettings.volume = channelAttributesObject.volume[section];
                                        channelSectionSettings.pan = channelAttributesObject.pan[section];
                                        channelSectionSettings.reverberation = channelAttributesObject.reverberation[section];
                                        channelSectionSettings.pitchWheelSensitivity = channelAttributesObject.pitchWheelSensitivity[section];
                                        channelSectionSettings.velocityPitchSensitivity = channelAttributesObject.velocityPitchSensitivity[section];
                                        channelSectionSettings.keyboardOrnamentsArrayIndex = channelAttributesObject.keyboardOrnamentsArrayIndex[section];

                                        channelSections.push(channelSectionSettings)
                                    }

                                    channelSettingsPerSectionArray.push(channelSections);
                                }

                                return channelSettingsPerSectionArray;
                            }

                            function checkValues(channelSettings, sectionIndex)
                            {
                                function getErrorString(errorString, errorCondition, errorMessage)
                                {
                                    errorString = (errorCondition) ? errorString.concat(errorMessage, "\n") : errorString;
                                    return errorString;
                                }

                                function midiRangeError(value)
                                {
                                    return (value < 0 || value > 127) ? true : false;
                                }

                                function midiErrorMsg(ctlString, value)
                                {
                                    return `${ctlString} out of range [0..127] (${ctlString}=${value})`;
                                }

                                let webAudioFontDef = ResSynth.webAudioFontDef,
                                    mixtureDefs = ResSynth.mixtureDefs,
                                    tuningDefs = ResSynth.tuningDefs,
                                    ornamentDefs = ResSynth.ornamentDefs,
                                    bankIndex = channelSettings.bankIndex,
                                    presetIndex = channelSettings.presetIndex,
                                    mixtureIndex = channelSettings.mixtureIndex,
                                    tuningGroupIndex = channelSettings.tuningGroupIndex,
                                    tuningIndex = channelSettings.tuningIndex,
                                    semitonesOffset = channelSettings.semitonesOffset,
                                    centsOffset = channelSettings.centsOffset,
                                    pitchWheel = channelSettings.pitchWheel,
                                    modWheel = channelSettings.modWheel,
                                    volume = channelSettings.volume,
                                    pan = channelSettings.pan,
                                    reverberation = channelSettings.reverberation,
                                    pitchWheelSensitivity = channelSettings.pitchWheelSensitivity,
                                    velocityPitchSensitivity = channelSettings.velocityPitchSensitivity,
                                    keyboardOrnamentsArrayIndex = channelSettings.keyboardOrnamentsArrayIndex,
                                    errorString = "";

                                // N.B. "noMixtures", "noTuningGroup" and "noOrnament" options are inserted before the definitions given in
                                // ResSynth.mixtureDefs, ResSynth.tuningDefs and ResSynth.ornamentDefs, so the corresponding allowed indexes
                                // can be as large as the lengths of each of these definitions.
                                errorString = getErrorString(errorString, webAudioFontDef === undefined, `webAudioFont must be defined.`);
                                if(bankIndex !== undefined)
                                    errorString = getErrorString(errorString, bankIndex < 0 || bankIndex >= webAudioFontDef.length, `bankIndex out of range (0..${webAudioFontDef.length - 1}).`);
                                if(presetIndex !== undefined)
                                    errorString = getErrorString(errorString, presetIndex < 0 || presetIndex >= webAudioFontDef[bankIndex].presets.length, `preset out of range in webAudioFontDef bank (bankIndex=${bankIndex}, presetIndex=${presetIndex})`);
                                if(mixtureIndex !== undefined)
                                {
                                    errorString = getErrorString(errorString, mixtureIndex < 0, `mixtureIndex must be >= 0`);
                                    errorString = getErrorString(errorString, mixtureDefs === undefined, `mixtureIndex must be >= 0`);
                                    errorString = getErrorString(errorString, mixtureDefs === undefined && mixtureIndex > 0, `mixtureIndex must be 0 if mixtureDefs are not defined.`);
                                    errorString = getErrorString(errorString, mixtureDefs !== undefined && mixtureIndex >= mixtureDefs.length + 1, `mixtureIndex out of range (0..${mixtureDefs.length}): (mixtureIndex=${mixtureIndex})`);
                                }
                                if(tuningGroupIndex !== undefined)
                                {
                                    errorString = getErrorString(errorString, tuningGroupIndex < 0, `tuningGroupIndex must be >= 0`);
                                    errorString = getErrorString(errorString, tuningDefs === undefined && tuningGroupIndex > 0, `tuningGroupIndex must be 0 if tuningDefs are not defined.`);
                                    errorString = getErrorString(errorString, tuningDefs !== undefined && tuningGroupIndex >= tuningDefs.length + 1, `tuningGroupIndex out of range (0..${tuningDefs.length}): (tuningGroupIndex=${tuningGroupIndex})`);
                                }
                                if(tuningIndex !== undefined)
                                {
                                    errorString = getErrorString(errorString, tuningIndex < 0, `tuningIndex must be >= 0`);
                                    if(tuningGroupIndex !== undefined)
                                    {
                                        errorString = getErrorString(errorString, tuningDefs !== undefined && tuningIndex >= tuningDefs[tuningGroupIndex].tunings.length, `tuningIndex out of range (0..${tuningDefs[tuningGroupIndex].tunings.length - 1}): (tuningIndex=${tuningIndex})`);
                                    }
                                }
                                if(keyboardOrnamentsArrayIndex !== undefined)
                                {
                                    errorString = getErrorString(errorString, keyboardOrnamentsArrayIndex < 0, `keyboardOrnamentsArrayIndex must be >= 0`);
                                    errorString = getErrorString(errorString, ornamentDefs === undefined && keyboardOrnamentsArrayIndex > 0, `keyboardOrnamentsArrayIndex must be 0 if ornamentDefs are not defined.`);
                                    errorString = getErrorString(errorString, ornamentDefs !== undefined && keyboardOrnamentsArrayIndex >= ornamentDefs.length + 1, `keyboardOrnamentsArrayIndex out of range (0..${ornamentDefs.length}): (keyboardOrnamentsArrayIndex=${keyboardOrnamentsArrayIndex})`);
                                }
                                if(semitonesOffset !== undefined)
                                    errorString = getErrorString(errorString, semitonesOffset < -64 || semitonesOffset > 63, `semitonesOffset out of range [-64..+63] (semitonesOffset=${semitonesOffset})`);
                                if(centsOffset !== undefined)
                                    errorString = getErrorString(errorString, centsOffset < -50 || centsOffset > 50, `centsOffset out of range [-50..+50] (centsOffset=${centsOffset})`);
                                if(pitchWheel !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(pitchWheel), midiErrorMsg("pitchWheel", pitchWheel));
                                if(modWheel !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(modWheel), midiErrorMsg("modWheel", modWheel));
                                if(volume !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(volume), midiErrorMsg("volume", volume));
                                if(pan !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(pan), midiErrorMsg("pan", pan));
                                if(reverberation !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(reverberation), midiErrorMsg("reverberation", reverberation));
                                if(pitchWheelSensitivity !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(pitchWheelSensitivity), midiErrorMsg("pitchWheelSensitivity", pitchWheelSensitivity));
                                if(velocityPitchSensitivity !== undefined)
                                    errorString = getErrorString(errorString, midiRangeError(velocityPitchSensitivity), midiErrorMsg("velocityPitchSensitivity", velocityPitchSensitivity));

                                if(errorString.length > 0)
                                {
                                    errorString = `Error in synthSettingsDefs.js channelSettingsArray:\n` +
                                        `section index: ${sectionIndex} \n\n` + errorString;
                                    throwError(errorString);
                                }
                            }

                            let channelSettingsPerSectionArray = getChannelSettingsPerSectionArray(channelSettingsArray),
                                nChannels = channelSettingsPerSectionArray.length,
                                nSections = channelSettingsPerSectionArray[0].length;

                            for(let channel = 0; channel < nChannels; channel++)
                            {
                                let channelSettingsPerSection = channelSettingsPerSectionArray[channel];

                                for(let sectionIndex = 0; sectionIndex < nSections; sectionIndex++)
                                {
                                    let channelSettings = channelSettingsPerSection[sectionIndex];

                                    checkValues(channelSettings, sectionIndex);
                                }
                            }
                        }

                        // the returned sectionSettings contain only the attributes and values necessary for incrementing the state.
                        function getSynthSettingsArray(names, keyboardSplitIndexes, triggerKeys, channelSettingsArray)
                        {
                            // returns undefined if the attribute does not need to be set,
                            // otherwise returns valuesArray[settingsIndex].
                            function getNewAttributeValue(valuesArray, settingsIndex, defaultValue)
                            {
                                let value = valuesArray[settingsIndex];

                                if(settingsIndex > 0)
                                {
                                    if(valuesArray[settingsIndex - 1] !== value)
                                    {
                                        return value;
                                    }
                                    else return undefined;
                                }
                                else if(value !== defaultValue)
                                {
                                    return value;
                                }
                                else
                                {
                                    return undefined;
                                }
                            }

                            function getNewChannelSettings(channelSettingsArray, settingsIndex)
                            {
                                function getNewChanSettings(channel, inChannelSettingsArrays, settingsIndex)
                                {
                                    function setNewAttributeValue(newChannelSettings, inChannelSettingsArray, attrName, settingsIndex, defaultValue)
                                    {
                                        let attributeValuesArray = inChannelSettingsArray[attrName],
                                            value = getNewAttributeValue(attributeValuesArray, settingsIndex, defaultValue);

                                        if(value !== undefined)
                                        {
                                            newChannelSettings[attrName] = value;
                                        }
                                    }

                                    let newChannelSettings = new ResSynth.channelSettings.ChannelSettings(channel);

                                    setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "bankIndex", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "presetIndex", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "mixtureIndex", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "tuningGroupIndex", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "tuningIndex", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "semitonesOffset", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "centsOffset", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "pitchWheel", settingsIndex, 64), // default 64
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "modWheel", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "volume", settingsIndex, 100), // default 100
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "pan", settingsIndex, 64), // default 64
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "reverberation", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "pitchWheelSensitivity", settingsIndex, 2), // default 2
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "velocityPitchSensitivity", settingsIndex, 0), // default 0
                                        setNewAttributeValue(newChannelSettings, inChannelSettingsArrays, "keyboardOrnamentsArrayIndex", settingsIndex, 0); // default 0           

                                    return newChannelSettings;
                                }

                                let newChannelSettingsArray = [],
                                    nChannels = channelSettingsArray.length,
                                    emptyChannelSettings = new ResSynth.channelSettings.ChannelSettings(0);

                                for(let channel = 0; channel < nChannels; channel++)
                                {
                                    let inChannelSettingsArrays = channelSettingsArray[channel],
                                        newChannelSettings = getNewChanSettings(channel, inChannelSettingsArrays, settingsIndex);

                                    if(newChannelSettings.isSimilar(emptyChannelSettings) === false)
                                    {
                                        newChannelSettingsArray.push(newChannelSettings);
                                    }
                                }

                                return newChannelSettingsArray;
                            }

                            let synthSettingsArray = [];

                            let nSections = channelSettingsArray[0].bankIndex.length;

                            for(let settingsIndex = 0; settingsIndex < nSections; settingsIndex++)
                            {
                                let sectionSettings = {},
                                    name = names[settingsIndex],
                                    keyboardSplitIndex = getNewAttributeValue(keyboardSplitIndexes, settingsIndex, 0),
                                    triggerKey = getNewAttributeValue(triggerKeys, settingsIndex, 0),
                                    channelSettings = getNewChannelSettings(channelSettingsArray, settingsIndex);

                                sectionSettings.name = name;

                                if(keyboardSplitIndex !== undefined)
                                {
                                    sectionSettings.keyboardSplitIndex = keyboardSplitIndex;
                                }

                                if(triggerKey !== undefined)
                                {
                                    sectionSettings.triggerKey = triggerKey;
                                }

                                sectionSettings.channelSettings = channelSettings;

                                synthSettingsArray.push(sectionSettings);
                            }

                            return synthSettingsArray;
                        }

                        let synthSettingsArray = [];

                        if(synthSettingsDefs !== undefined)
                        {
                            let names = synthSettingsDefs.names,
                                keyboardSplitIndexes = synthSettingsDefs.keyboardSplitIndexes,
                                triggerKeys = synthSettingsDefs.triggerKeys,
                                channelSettingsArray = synthSettingsDefs.channelSettingsArray;

                            checkTopLevelAttributes(names, keyboardSplitIndexes, triggerKeys);
                            checkChannelSettingsArray(channelSettingsArray, names.length);
                            checkChannelSettingsValues(channelSettingsArray);

                            synthSettingsArray = getSynthSettingsArray(names, keyboardSplitIndexes, triggerKeys, channelSettingsArray);
                        }

                        return synthSettingsArray;
                    }

                    let settingsSelect = getElem("settingsSelect"),
                        synthSettingsArray = getSynthSettingsArray(ResSynth.synthSettingsDefs);

                    console.assert(synthSettingsArray.length < 127);

                    for(let settingsIndex = 0; settingsIndex < synthSettingsArray.length; settingsIndex++)
                    {
                        let option = new Option();

                        option.innerHTML = synthSettingsArray[settingsIndex].name;
                        settingsSelect.options.add(option);
                    }

                    settingsSelect.synthSettingsArray = synthSettingsArray;
                    settingsSelect.selectedIndex = 0;
                    settingsSelect.previousIndex = Number.MAX_VALUE;
                }

                function setRecordingSelect()
                {
                    let recordingSelect = getElem("recordingSelect"),
                        playRecordingButton = getElem("playRecordingButton"); 

                    // recordings is a global array (has been retrieved from recordings.js)
                    if(presetRecordings.length > 0)
                    {
                        for(let i = 0; i < presetRecordings.length; i++)
                        {
                            let option = new Option();
                            option.innerHTML = presetRecordings[i].name;
                            recordingSelect.options.add(option);
                        }
                        recordingSelect.disabled = false;
                        playRecordingButton.disabled = false;
                    }
                    else
                    {
                        let option = new Option();
                        option.innerHTML = "no recordings have been defined (see docs)";
                        recordingSelect.options.add(option);
                        recordingSelect.disabled = true;
                        playRecordingButton.disabled = true;
                    }

                    recordingSelect.selectedIndex = 0;
                }

                function displayAllPage2Divs()
                {
                    let channelsDiv = getElem("channelsDiv"),
                        webAudioFontDiv = getElem("webAudioFontDiv"),
                        tuningDiv = getElem("tuningDiv"),
                        commandsAndControlsDiv = getElem("commandsAndControlsDiv"),
                        ornamentsDiv = getElem("ornamentsDiv"),
                        triggersDiv = getElem("triggersDiv"),
                        recordingDiv = getElem("recordingDiv"),
                        simpleInputDiv = getElem("simpleInputDiv");

                    channelsDiv.style.display = "block";
                    webAudioFontDiv.style.display = "block";
                    tuningDiv.style.display = "block";
                    commandsAndControlsDiv.style.display = "block";
                    ornamentsDiv.style.display = "block";
                    triggersDiv.style.display = "block";
                    recordingDiv.style.display = "block";
                    simpleInputDiv.style.display = "block";

                    setPerformanceGUIState1();
                }

                let
                    bankSelect = getElem("bankSelect"),
                    presetSelect = getElem("presetSelect"),
                    mixtureSelect = getElem("mixtureSelect"),
                    tuningGroupSelect = getElem("tuningGroupSelect");

                console.assert(synth.name === "ResidentSynth", "Error: this app only uses the ResidentSynth");

                setChannelsDiv();

                setBankSelect(bankSelect);
                setPresetSelect(presetSelect, bankSelect);
                setMixtureSelect(mixtureSelect);                

                setTuningGroupSelect(tuningGroupSelect);
                setTuningSelect();
                setSemitonesAndCentsControls();

                setCommandsAndControlsDivs();
                setOrnamentsDiv();
                setSettingsSelect();
                setRecordingSelect();

                onSettingsSelectChanged();

                getElem("exportSettingsButton").disabled = true;

                displayAllPage2Divs();
            }
            
            getElem("continueAtStartButtonDiv").style.display = "none";

            setInputDeviceEventListener(getElem("inputDeviceSelect"));

            // Its important to call this function after user interaction with the GUI.
            synth.open()
                .then(() => {console.log("Opened ResidentSynth");})
                .catch(() => {console.error("Error opening ResidentSynth");});

            // This function initializes the synth with the (default) values of all the host's controls
            // by calling the corresponding functions in the synth's public interface.
            setPage2Display(synth);
        },

        // exported
        noteCheckboxClicked = function()
        {
            var
                note1Checkbox = getElem("sendNote1Checkbox"),
                note2Checkbox = getElem("sendNote2Checkbox");

            if((!note1Checkbox.checked) && (!note2Checkbox.checked))
            {
                note2Checkbox.checked = true;
            }
        },

        // exported
        doNotesOn = function()
        {
            function sendNoteOn(key, velocity)
            {
                let msg = new Uint8Array([ResSynth.constants.COMMAND.NOTE_ON + currentChannel, key, velocity]);
                sendMessage(msg, currentChannel);
            }

            let
                note1Checkbox = getElem("sendNote1Checkbox"),
                note1Index = getElem("notesDivIndexInput1").valueAsNumber,
                note1Velocity = getElem("notesDivVelocityInput1").valueAsNumber,
                note2Checkbox = getElem("sendNote2Checkbox"),
                note2Index = getElem("notesDivIndexInput2").valueAsNumber,
                note2Velocity = getElem("notesDivVelocityInput2").valueAsNumber,
                holdCheckbox = getElem("holdCheckbox"),
                sendButton = getElem("sendButton");

            if(holdCheckbox.checked === true)
            {
                sendButton.disabled = true;
            }

            if(note1Checkbox.checked)
            {
                sendNoteOn(note1Index, note1Velocity);
            }
            if(note2Checkbox.checked)
            {
                sendNoteOn(note2Index, note2Velocity);
            }
        },

        // exported
        doNotesOff = function()
        {
            function sendNoteOff(noteIndex, noteVelocity)
            {
                var
                    NOTE_ON = ResSynth.constants.COMMAND.NOTE_ON,
                    NOTE_OFF = ResSynth.constants.COMMAND.NOTE_OFF;

                if(synth.commands.indexOf(NOTE_OFF) >= 0)
                {
                    let msg = new Uint8Array([ResSynth.constants.COMMAND.NOTE_OFF + currentChannel, noteIndex, noteVelocity]);
                    sendMessage(msg, currentChannel);
                }
                else
                {
                    let msg = new Uint8Array([ResSynth.constants.COMMAND.NOTE_ON + currentChannel, noteIndex, 0]);
                    sendMessage(msg, currentChannel);
                }
            }

            var
                note1Checkbox = getElem("sendNote1Checkbox"),
                note1Index = getElem("notesDivIndexInput1").valueAsNumber,
                note1Velocity = getElem("notesDivVelocityInput1").valueAsNumber,
                note2Checkbox = getElem("sendNote2Checkbox"),
                note2Index = getElem("notesDivIndexInput2").valueAsNumber,
                note2Velocity = getElem("notesDivVelocityInput2").valueAsNumber;

            if(note1Checkbox.checked)
            {
                sendNoteOff(note1Index, note1Velocity);
            }
            if(note2Checkbox.checked)
            {
                sendNoteOff(note2Index, note2Velocity);
            }
        },

        // exported
        holdCheckboxClicked = function()
        {
            let holdCheckbox = getElem("holdCheckbox");

            doNotesOff();

            if(holdCheckbox.checked === false)
            {
                getElem("sendButton").disabled = false;
            }
        },

        init = function()
        {
            function setupInputDevice()
            {
                function setInputDeviceSelect(midiAccess)
                {
                    let iDevSelect = getElem("inputDeviceSelect"),
                        option;

                    iDevSelect.options.length = 0; // important when called by midiAccess.onstatechange 

                    option = document.createElement("option");
                    if(midiAccess !== null)
                    {
                        midiAccess.inputs.forEach(function(port)
                        {
                            //console.log('input id:', port.id, ' input name:', port.name);
                            option = document.createElement("option");
                            option.inputDevice = port;
                            option.text = port.name;
                            iDevSelect.add(option, null);
                        });
                        iDevSelect.disabled = false;
                    }
                    else
                    {
                        option.text = "No MIDI input devices";
                        iDevSelect.add(option, null);
                        iDevSelect.disabled = true;
                    }

                    iDevSelect.selectedIndex = iDevSelect.options.length - 1;
                    inputDevice = iDevSelect[iDevSelect.selectedIndex].inputDevice;
                }

                function onSuccessCallback(midiAccess)
                {
                    // Add the midiAccess.inputs to the inputDeviceSelect.
                    setInputDeviceSelect(midiAccess);
                }

                // This function will be called either
                // if the browser does not support the Web MIDI API,
                // or if the user refuses permission to use his hardware MIDI devices.
                function onErrorCallback()
                {
                    alert("Error getting midiAccess for the inputDevice.");
                }

                navigator.requestMIDIAccess().then(onSuccessCallback, onErrorCallback);
            }

            async function setAudioDeviceSelect()
            {
                const permission = await navigator.permissions.query({name: "microphone"});
                if(permission.state == "prompt")
                {
                    alert("More audio outputs are available when user grants access to the microphone");
                    const stream = await navigator.mediaDevices.getUserMedia({audio: true});
                    stream.getTracks().forEach((track) => track.stop());
                }

                const devices = await navigator.mediaDevices.enumerateDevices();
                const AudioOutputDevices = devices.filter(device => device.kind == "audiooutput");

                let audioDeviceSelect = getElem("audioDeviceSelect");
                for(let i = 0; i < AudioOutputDevices.length; i++)  
                {
                    let audioDev = AudioOutputDevices[i]
                    let option = document.createElement("option");
                    option.text = audioDev.label;
                    option.deviceId = audioDev.deviceId;
                    audioDeviceSelect.add(option, null);
                }
            }

            // returns an array of recordings
            // Each recording object has three attributes:
            //   name -- the recording's name
            //   settingsArray: an array of channelSettings, each of which contains the initial control channelSettings for a channel in the recording
            //   messages: an array of msg objects, each of which has two attributes
            //     1) msg: a UintArray of the form[status, data1, data2] and
            //     2) delay: an integer, the number of milliseconds to delay before sending the msg.
            function getRecordings()	
            {
                function getMessageData(msgStringsArray)
                {
                    let msgData = [];
                    for(let i = 0; i < msgStringsArray.length; i++)
                    {
                        let msgStr = msgStringsArray[i],
                            strData = msgStr.split(","),
                            status = parseInt(strData[0]),
                            data1 = parseInt(strData[1]),
                            data2 = parseInt(strData[2]),
                            msPositionReRecording = parseInt(strData[3]),
                            msg = new Uint8Array([status, data1, data2]),
                            msgObj = {};

                        msgObj.msg = msg;
                        msgObj.msPositionReRecording = msPositionReRecording;

                        msgData.push(msgObj);
                    }
                    return msgData;
                }

                let wRecordings = ResSynth.recordings,
                    returnRecordings = [];

                if(wRecordings !== undefined)
                {
                    for(let i = 0; i < wRecordings.length; i++)
                    {
                        let record = wRecordings[i],
                            recording = {};

                        recording.name = record.name;
                        recording.channels = record.channels;
                        for(let channelIndex = 0; channelIndex < recording.channels.length; channelIndex++)
                        {
                            recording.channels[channelIndex].messages = getMessageData(recording.channels[channelIndex].messages);
                        }

                        returnRecordings.push(recording);
                    }
                }

                return returnRecordings;
            }

            function setInitialDivsDisplay()
            {
                function hideAllPage2Divs()
                {
                    let channelsDiv = getElem("channelsDiv"),
                        webAudioFontDiv = getElem("webAudioFontDiv"),
                        tuningDiv = getElem("tuningDiv"),
                        commandsAndControlsDiv = getElem("commandsAndControlsDiv"),
                        ornamentsDiv = getElem("ornamentsDiv"),
                        triggersDiv = getElem("triggersDiv"),
                        recordingDiv = getElem("recordingDiv"),
                        simpleInputDiv = getElem("simpleInputDiv");

                    channelsDiv.style.display = "none";
                    webAudioFontDiv.style.display = "none";
                    tuningDiv.style.display = "none";
                    commandsAndControlsDiv.style.display = "none";
                    ornamentsDiv.style.display = "none";
                    triggersDiv.style.display = "none";
                    recordingDiv.style.display = "none";
                    simpleInputDiv.style.display = "none";
                }

                getElem("loadingMsgDiv").style.display = "none";
                getElem("continueAtStartButtonDiv").style.display = "block";

                hideAllPage2Divs();
            }

            setupInputDevice();
            setAudioDeviceSelect();
            presetRecordings = getRecordings();  // loads definitions from recordings.js.
            synth = new ResSynth.residentSynth.ResidentSynth(); // loads definitions from files in residentSynth/config.
            setInitialDivsDisplay();
        },

        publicAPI =
        {
            onInputDeviceSelectChanged: onInputDeviceSelectChanged,
            onAudioDeviceSelectChanged: onAudioDeviceSelectChanged,

            onContinueAtStartClicked: onContinueAtStartClicked,

            webAudioFontWebsiteButtonClick: webAudioFontWebsiteButtonClick,

            onChannelSelectChanged: onChannelSelectChanged,
            onKeyboardSplitSelectChanged: onKeyboardSplitSelectChanged,

            onBankSelectChanged: onBankSelectChanged,
            onPresetSelectChanged: onPresetSelectChanged,
            onMixtureSelectChanged: onMixtureSelectChanged,
            onTuningGroupSelectChanged: onTuningGroupSelectChanged,
            onTuningSelectChanged: onTuningSelectChanged,
            onSemitonesOffsetNumberInputChanged: onSemitonesOffsetNumberInputChanged,
            onCentsOffsetNumberInputChanged: onCentsOffsetNumberInputChanged,

            onSettingsSelectChanged: onSettingsSelectChanged,
            onExportSettingsButtonClicked: onExportSettingsButtonClicked,
            onTriggerKeyInputChanged: onTriggerKeyInputChanged,

            onPlayRecordingButtonClicked: onPlayRecordingButtonClicked,
            onCancelPlaybackButtonClicked: onCancelPlaybackButtonClicked,
            onStartRecordingButtonClicked: onStartRecordingButtonClicked,
            onStopRecordingButtonClicked: onStopRecordingButtonClicked,
            onSaveRecordingButtonClicked: onSaveRecordingButtonClicked,
            onDiscardRecordingButtonClicked: onDiscardRecordingButtonClicked,

            onKeyOrnamentsSelectChanged: onOrnamentsSelectChanged,

            noteCheckboxClicked: noteCheckboxClicked,
            holdCheckboxClicked: holdCheckboxClicked,

            doNotesOn: doNotesOn,
            doNotesOff: doNotesOff
        };
    // end var

    init();

    return publicAPI;

}(document));
